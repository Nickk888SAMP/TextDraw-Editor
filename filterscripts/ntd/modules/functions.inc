/*
  _____                     _                 _       ______                          _     _                       
 |  __ \                   (_)               | |     |  ____|                        | |   (_)                      
 | |__) |  _ __    ___      _    ___    ___  | |_    | |__     _   _   _ __     ___  | |_   _    ___    _ __    ___ 
 |  ___/  | '__|  / _ \    | |  / _ \  / __| | __|   |  __|   | | | | | '_ \   / __| | __| | |  / _ \  | '_ \  / __|
 | |      | |    | (_) |   | | |  __/ | (__  | |_    | |      | |_| | | | | | | (__  | |_  | | | (_) | | | | | \__ \ 
 |_|      |_|     \___/    | |  \___|  \___|  \__|   |_|       \__,_| |_| |_|  \___|  \__| |_|  \___/  |_| |_| |___/
                          _/ |                                                                                      
                         |__/                                                                                       
*/
RenameProject(index, newprojectname[])
{
	new string1[128], string2[128];
	format(string1, sizeof string1, PROJECTS_DIRECTORYPATH"/%s", GetProjectName(index, true));	
	if(!Exists(string1)) 	
		return -1;
	format(string2, sizeof string2, PROJECTS_DIRECTORYPATH"/%s.%s", newprojectname, Extensions[ NTD_Projects[index][Pro_fileExtensionId] ][fe_extension]);	
	if(Exists(string2)) 
		return 3;
	if(!IsValidString(newprojectname) || strlen(newprojectname) == 0 || strlen(newprojectname) > 40)
		return 2;
	
	MoveFile(string1, string2);
	return 1;
}

CreateProject(projectname[])
{
	new filePath[256];
	format(filePath, sizeof filePath, PROJECTS_DIRECTORYPATH"/%s.ntd", projectname);			
	if(!Exists(filePath))
	{
		JSON_SaveFile(filePath, JSON_Object());
		return 1;
	}
	return 0;
}

ExportProject(index, exporttype=0, bool:intoarray = false)
{
	new filename[128], bool:clickableTD, publiccount, nonpubliccount, barscount;
	format(filename, 128, EXPORTS_DIRECTORYPATH"/%s.pwn", GetProjectName(index));
	if(Exists(MakePath(filename, true)))
		fremove(filename);
	
	if(Exists(MakePath(EXPORTS_DIRECTORYPATH, true)))
	{
		new File:file = fopen(filename, io_write);
		if(file)
		{
			fwrite(file, "/*\nThis file was generated by Nickk's TextDraw editor script\n");
			fwrite(file, "Nickk888 is the author of the NTD script\n*/\n\n");
			if(exporttype == 0) //RAW EXPORT
			{
				fwrite(file, "//Variables\n");
				if(intoarray) //ARRAY
				{
					//Count non custom vars
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							if(NTD_TD[i][TD_IsGlobal] && strlen(NTD_TD[i][TD_VarName]) == 0) publiccount++;
							else if(!NTD_TD[i][TD_IsGlobal] && strlen(NTD_TD[i][TD_VarName]) == 0) nonpubliccount++;
						}
						else if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR && strlen(NTD_TD[i][TD_VarName]) == 0) barscount++;
					}
					//Generate Non custom Vars
					if(publiccount > 0)
					{
						format(EditorString, sizeof EditorString, "new Text:PublicTD[%i];\n", publiccount);
						fwrite(file, EditorString);
					}
					if(nonpubliccount > 0)
					{
						format(EditorString, sizeof EditorString, "new PlayerText:PlayerTD[MAX_PLAYERS][%i];\n", nonpubliccount);
						fwrite(file, EditorString);
					}
					if(barscount > 0)
					{
						format(EditorString, sizeof EditorString, "new PlayerBar:PlayerProgressBar[MAX_PLAYERS][%i];\n", barscount);
						fwrite(file, EditorString);
					}
					//Generate Custom Vars
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_IsGlobal] && strlen(NTD_TD[i][TD_VarName]) != 0 && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "new Text:%s;\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(!NTD_TD[i][TD_IsGlobal] && strlen(NTD_TD[i][TD_VarName]) != 0 && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "new PlayerText:%s[MAX_PLAYERS];\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(strlen(NTD_TD[i][TD_VarName]) != 0 && NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "new PlayerBar:%s[MAX_PLAYERS];\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
				}
				else //NON ARRAY
				{
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR) 
						{
							format(EditorString, sizeof EditorString, "new Text:%s;\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(!NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR) 
						{
							format(EditorString, sizeof EditorString, "new PlayerText:%s[MAX_PLAYERS];\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "new PlayerBar:%s[MAX_PLAYERS];\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
				}
				fwrite(file, "\n//Textdraws\n");
				if(intoarray) //ARRAY
				{
					publiccount = 0;
					nonpubliccount = 0;
					barscount = 0;
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							if(strlen(NTD_TD[i][TD_VarName]) == 0) //Non custom var name
							{
								format(EditorString, sizeof EditorString, "PublicTD[%i] = TextDrawCreate(%f, %f, \x22%s\x22);\n", publiccount, NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_Text]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawFont(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_Font]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawLetterSize(PublicTD[%i], %f, %f);\n", publiccount, NTD_TD[i][TD_LetterSizeX], NTD_TD[i][TD_LetterSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawTextSize(PublicTD[%i], %f, %f);\n", publiccount, NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawSetOutline(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_OutlineSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawSetShadow(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_ShadowSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawAlignment(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_Alignment]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawColor(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_Color]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawBackgroundColor(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_BGColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawBoxColor(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_BoxColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawUseBox(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_UseBox]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawSetProportional(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_Proportional]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawSetSelectable(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_Selectable]);
								fwrite(file, EditorString);
								if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_MODEL_PREVIEW)
								{
									format(EditorString, sizeof EditorString, "TextDrawSetPreviewModel(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_PrevModelID]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "TextDrawSetPreviewRot(PublicTD[%i], %f, %f, %f, %f);\n", publiccount, NTD_TD[i][TD_PrevRotX], NTD_TD[i][TD_PrevRotY], NTD_TD[i][TD_PrevRotZ], NTD_TD[i][TD_PrevRotZoom]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "TextDrawSetPreviewVehCol(PublicTD[%i], %i, %i);\n", publiccount, NTD_TD[i][TD_PrevModelC1], NTD_TD[i][TD_PrevModelC2]);
									fwrite(file, EditorString);
									
								}
								fwrite(file, "\n");
								publiccount++;
							}
							else //Custom var name
							{
								format(EditorString, sizeof EditorString, "%s = TextDrawCreate(%f, %f, \x22%s\x22);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_Text]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawFont(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Font]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawLetterSize(%s, %f, %f);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_LetterSizeX], NTD_TD[i][TD_LetterSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawTextSize(%s, %f, %f);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawSetOutline(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_OutlineSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawSetShadow(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_ShadowSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawAlignment(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Alignment]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawColor(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Color]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawBackgroundColor(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_BGColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawBoxColor(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_BoxColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawUseBox(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_UseBox]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawSetProportional(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Proportional]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawSetSelectable(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Selectable]);
								fwrite(file, EditorString);
								if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_MODEL_PREVIEW)
								{
									format(EditorString, sizeof EditorString, "TextDrawSetPreviewModel(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelID]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "TextDrawSetPreviewRot(%s, %f, %f, %f, %f);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PrevRotX], NTD_TD[i][TD_PrevRotY], NTD_TD[i][TD_PrevRotZ], NTD_TD[i][TD_PrevRotZoom]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "TextDrawSetPreviewVehCol(%s, %i, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelC1], NTD_TD[i][TD_PrevModelC2]);
									fwrite(file, EditorString);
									
								}
								fwrite(file, "\n");
							}
						}					
						if(NTD_TD[i][TD_Selectable])
							clickableTD = true;
					}
					fwrite(file, "\n//Player Textdraws\n");
					foreach(new i : I_TEXTDRAWS)
					{
						if(!NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							if(strlen(NTD_TD[i][TD_VarName]) == 0) //Non Custom var name
							{
								format(EditorString, sizeof EditorString, "PlayerTD[playerid][%i] = CreatePlayerTextDraw(playerid, %f, %f, \x22%s\x22);\n", nonpubliccount, NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_Text]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawFont(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_Font]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawLetterSize(playerid, PlayerTD[playerid][%i], %f, %f);\n", nonpubliccount, NTD_TD[i][TD_LetterSizeX], NTD_TD[i][TD_LetterSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawTextSize(playerid, PlayerTD[playerid][%i], %f, %f);\n", nonpubliccount, NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawSetOutline(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_OutlineSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawSetShadow(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_ShadowSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawAlignment(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_Alignment]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawColor(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_Color]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawBackgroundColor(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_BGColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawBoxColor(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_BoxColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawUseBox(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_UseBox]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawSetProportional(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_Proportional]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawSetSelectable(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_Selectable]);
								fwrite(file, EditorString);
								if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_MODEL_PREVIEW)
								{
									format(EditorString, sizeof EditorString, "PlayerTextDrawSetPreviewModel(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_PrevModelID]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "PlayerTextDrawSetPreviewRot(playerid, PlayerTD[playerid][%i], %f, %f, %f, %f);\n", nonpubliccount, NTD_TD[i][TD_PrevRotX], NTD_TD[i][TD_PrevRotY], NTD_TD[i][TD_PrevRotZ], NTD_TD[i][TD_PrevRotZoom]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "PlayerTextDrawSetPreviewVehCol(playerid, PlayerTD[playerid][%i], %i, %i);\n", nonpubliccount, NTD_TD[i][TD_PrevModelC1], NTD_TD[i][TD_PrevModelC2]);
									fwrite(file, EditorString);
								}
								fwrite(file, "\n");
								nonpubliccount++;
							}
							else //Custom var name
							{
								format(EditorString, sizeof EditorString, "%s[playerid] = CreatePlayerTextDraw(playerid, %f, %f, \x22%s\x22);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_Text]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawFont(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Font]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawLetterSize(playerid, %s[playerid], %f, %f);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_LetterSizeX], NTD_TD[i][TD_LetterSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawTextSize(playerid, %s[playerid], %f, %f);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawSetOutline(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_OutlineSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawSetShadow(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_ShadowSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawAlignment(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Alignment]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawColor(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Color]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawBackgroundColor(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_BGColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawBoxColor(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_BoxColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawUseBox(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_UseBox]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawSetProportional(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Proportional]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawSetSelectable(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Selectable]);
								fwrite(file, EditorString);
								if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_MODEL_PREVIEW)
								{
									format(EditorString, sizeof EditorString, "PlayerTextDrawSetPreviewModel(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelID]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "PlayerTextDrawSetPreviewRot(playerid, %s[playerid], %f, %f, %f, %f);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PrevRotX], NTD_TD[i][TD_PrevRotY], NTD_TD[i][TD_PrevRotZ], NTD_TD[i][TD_PrevRotZoom]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "PlayerTextDrawSetPreviewVehCol(playerid, %s[playerid], %i, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelC1], NTD_TD[i][TD_PrevModelC2]);
									fwrite(file, EditorString);
								}
								fwrite(file, "\n");
							}
						}
						if(NTD_TD[i][TD_Selectable])
							clickableTD = true;
					}
					fwrite(file, "\n/*Player Progress Bars\n");
					fwrite(file, "Requires \"progress2\" include by Southclaws\n");
					fwrite(file, "Download: https://github.com/Southclaws/progress2/releases */\n");
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							
							if(strlen(NTD_TD[i][TD_VarName]) == 0) //Non Custom var name
							{
								format(EditorString, sizeof EditorString, "PlayerProgressBar[playerid][%i] = CreatePlayerProgressBar(playerid, %f, %f, %f, %f, %i, %f, %i);\n", barscount, NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY], NTD_TD[i][TD_Color], NTD_TD[i][TD_BarMaxPercentage], NTD_TD[i][TD_BarDirectory]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "SetPlayerProgressBarValue(playerid, PlayerProgressBar[playerid][%i], %f);\n", barscount, (NTD_TD[i][TD_BarMaxPercentage] / 2.0));
								fwrite(file, EditorString);
								fwrite(file, "\n");
								barscount++;
							}
							else //Custom var name
							{
								format(EditorString, sizeof EditorString, "%s[playerid] = CreatePlayerProgressBar(playerid, %f, %f, %f, %f, %i, %f, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY], NTD_TD[i][TD_Color], NTD_TD[i][TD_BarMaxPercentage], NTD_TD[i][TD_BarDirectory]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "SetPlayerProgressBarValue(playerid, %s[playerid], %f);\n", GetProcessedTDVarName(i), (NTD_TD[i][TD_BarMaxPercentage] / 2.0));
								fwrite(file, EditorString);
								fwrite(file, "\n");
							}
						}
					}
				}
				else //NON ARRAY
				{
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "%s = TextDrawCreate(%f, %f, \x22%s\x22);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_Text]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "TextDrawFont(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Font]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "TextDrawLetterSize(%s, %f, %f);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_LetterSizeX], NTD_TD[i][TD_LetterSizeY]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "TextDrawTextSize(%s, %f, %f);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "TextDrawSetOutline(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_OutlineSize]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "TextDrawSetShadow(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_ShadowSize]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "TextDrawAlignment(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Alignment]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "TextDrawColor(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Color]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "TextDrawBackgroundColor(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_BGColor]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "TextDrawBoxColor(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_BoxColor]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "TextDrawUseBox(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_UseBox]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "TextDrawSetProportional(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Proportional]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "TextDrawSetSelectable(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Selectable]);
							fwrite(file, EditorString);
							if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_MODEL_PREVIEW)
							{
								format(EditorString, sizeof EditorString, "TextDrawSetPreviewModel(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelID]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawSetPreviewRot(%s, %f, %f, %f, %f);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PrevRotX], NTD_TD[i][TD_PrevRotY], NTD_TD[i][TD_PrevRotZ], NTD_TD[i][TD_PrevRotZoom]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "TextDrawSetPreviewVehCol(%s, %i, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelC1], NTD_TD[i][TD_PrevModelC2]);
								fwrite(file, EditorString);
								
							}
							fwrite(file, "\n");
						}					
						if(NTD_TD[i][TD_Selectable])
							clickableTD = true;
					}
					fwrite(file, "//Player Textdraws\n");
					foreach(new i : I_TEXTDRAWS)
					{
						if(!NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "%s[playerid] = CreatePlayerTextDraw(playerid, %f, %f, \x22%s\x22);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_Text]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "PlayerTextDrawFont(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Font]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "PlayerTextDrawLetterSize(playerid, %s[playerid], %f, %f);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_LetterSizeX], NTD_TD[i][TD_LetterSizeY]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "PlayerTextDrawTextSize(playerid, %s[playerid], %f, %f);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "PlayerTextDrawSetOutline(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_OutlineSize]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "PlayerTextDrawSetShadow(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_ShadowSize]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "PlayerTextDrawAlignment(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Alignment]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "PlayerTextDrawColor(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Color]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "PlayerTextDrawBackgroundColor(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_BGColor]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "PlayerTextDrawBoxColor(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_BoxColor]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "PlayerTextDrawUseBox(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_UseBox]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "PlayerTextDrawSetProportional(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Proportional]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "PlayerTextDrawSetSelectable(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Selectable]);
							fwrite(file, EditorString);
							if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_MODEL_PREVIEW)
							{
								format(EditorString, sizeof EditorString, "PlayerTextDrawSetPreviewModel(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelID]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawSetPreviewRot(playerid, %s[playerid], %f, %f, %f, %f);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PrevRotX], NTD_TD[i][TD_PrevRotY], NTD_TD[i][TD_PrevRotZ], NTD_TD[i][TD_PrevRotZoom]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "PlayerTextDrawSetPreviewVehCol(playerid, %s[playerid], %i, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelC1], NTD_TD[i][TD_PrevModelC2]);
								fwrite(file, EditorString);
							}
							fwrite(file, "\n");
						}
						if(NTD_TD[i][TD_Selectable])
							clickableTD = true;
					}
					fwrite(file, "\n/*Player Progress Bars\n");
					fwrite(file, "Requires \"progress2\" include by Southclaws\n");
					fwrite(file, "Download: https://github.com/Southclaws/progress2/releases */\n");
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "%s[playerid] = CreatePlayerProgressBar(playerid, %f, %f, %f, %f, %i, %f, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY], NTD_TD[i][TD_Color], NTD_TD[i][TD_BarMaxPercentage], NTD_TD[i][TD_BarDirectory]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "SetPlayerProgressBarValue(playerid, %s[playerid], %f);\n", GetProcessedTDVarName(i), (NTD_TD[i][TD_BarMaxPercentage] / 2.0));
							fwrite(file, EditorString);
							fwrite(file, "\n");
						}
					}
				}
			}
			else if(exporttype == 1) //WORKING FS EXPORT
			{
				fwrite(file, "#include <a_samp>\n");
				foreach(new i : I_TEXTDRAWS)
				{
					if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR)
					{
						fwrite(file, "#include <progress2>\n");
						fwrite(file, "//Requires \"progress2\" include by Southclaws\n");
						fwrite(file, "//Download: https://github.com/Southclaws/progress2/releases\n");
						break;
					}
				}
				fwrite(file, "\n");
				if(intoarray) //ARRAY
				{
					//Count non custom vars
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							if(NTD_TD[i][TD_IsGlobal] && strlen(NTD_TD[i][TD_VarName]) == 0) publiccount++;
							else if(!NTD_TD[i][TD_IsGlobal] && strlen(NTD_TD[i][TD_VarName]) == 0) nonpubliccount++;
						}
						else if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR && strlen(NTD_TD[i][TD_VarName]) == 0) barscount++;
					}
					//Generate Non custom Vars
					if(publiccount > 0)
					{
						format(EditorString, sizeof EditorString, "new Text:PublicTD[%i];\n", publiccount);
						fwrite(file, EditorString);
					}
					if(nonpubliccount > 0)
					{
						format(EditorString, sizeof EditorString, "new PlayerText:PlayerTD[MAX_PLAYERS][%i];\n", nonpubliccount);
						fwrite(file, EditorString);
					}
					if(barscount > 0)
					{
						format(EditorString, sizeof EditorString, "new PlayerBar:PlayerProgressBar[MAX_PLAYERS][%i];\n", barscount);
						fwrite(file, EditorString);
					}
					//Generate Custom Vars
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_IsGlobal] && strlen(NTD_TD[i][TD_VarName]) != 0 && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "new Text:%s;\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(!NTD_TD[i][TD_IsGlobal] && strlen(NTD_TD[i][TD_VarName]) != 0 && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "new PlayerText:%s[MAX_PLAYERS];\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(strlen(NTD_TD[i][TD_VarName]) != 0 && NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "new PlayerBar:%s[MAX_PLAYERS];\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
				}
				else //NON ARRAY
				{
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR) 
						{
							format(EditorString, sizeof EditorString, "new Text:%s;\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(!NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR) 
						{
							format(EditorString, sizeof EditorString, "new PlayerText:%s[MAX_PLAYERS];\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "new PlayerBar:%s[MAX_PLAYERS];\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
				}

				fwrite(file, "\npublic OnFilterScriptInit()\n{\n");
				if(intoarray) //ARRAY
				{
					publiccount = 0;
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							if(strlen(NTD_TD[i][TD_VarName]) == 0) //Non custom var name
							{
								format(EditorString, sizeof EditorString, "\tPublicTD[%i] = TextDrawCreate(%f, %f, \x22%s\x22);\n", publiccount, NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_Text]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawFont(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_Font]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawLetterSize(PublicTD[%i], %f, %f);\n", publiccount, NTD_TD[i][TD_LetterSizeX], NTD_TD[i][TD_LetterSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawTextSize(PublicTD[%i], %f, %f);\n", publiccount, NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawSetOutline(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_OutlineSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawSetShadow(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_ShadowSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawAlignment(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_Alignment]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawColor(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_Color]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawBackgroundColor(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_BGColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawBoxColor(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_BoxColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawUseBox(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_UseBox]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawSetProportional(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_Proportional]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawSetSelectable(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_Selectable]);
								fwrite(file, EditorString);
								if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_MODEL_PREVIEW)
								{
									format(EditorString, sizeof EditorString, "\tTextDrawSetPreviewModel(PublicTD[%i], %i);\n", publiccount, NTD_TD[i][TD_PrevModelID]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "\tTextDrawSetPreviewRot(PublicTD[%i], %f, %f, %f, %f);\n", publiccount, NTD_TD[i][TD_PrevRotX], NTD_TD[i][TD_PrevRotY], NTD_TD[i][TD_PrevRotZ], NTD_TD[i][TD_PrevRotZoom]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "\tTextDrawSetPreviewVehCol(PublicTD[%i], %i, %i);\n", publiccount, NTD_TD[i][TD_PrevModelC1], NTD_TD[i][TD_PrevModelC2]);
									fwrite(file, EditorString);
									
								}
								fwrite(file, "\n");
								publiccount++;
							}
							else //Custom var name
							{
								format(EditorString, sizeof EditorString, "\t%s = TextDrawCreate(%f, %f, \x22%s\x22);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_Text]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawFont(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Font]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawLetterSize(%s, %f, %f);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_LetterSizeX], NTD_TD[i][TD_LetterSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawTextSize(%s, %f, %f);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawSetOutline(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_OutlineSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawSetShadow(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_ShadowSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawAlignment(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Alignment]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawColor(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Color]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawBackgroundColor(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_BGColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawBoxColor(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_BoxColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawUseBox(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_UseBox]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawSetProportional(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Proportional]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawSetSelectable(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Selectable]);
								fwrite(file, EditorString);
								if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_MODEL_PREVIEW)
								{
									format(EditorString, sizeof EditorString, "\tTextDrawSetPreviewModel(%s, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelID]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "\tTextDrawSetPreviewRot(%s, %f, %f, %f, %f);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PrevRotX], NTD_TD[i][TD_PrevRotY], NTD_TD[i][TD_PrevRotZ], NTD_TD[i][TD_PrevRotZoom]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "\tTextDrawSetPreviewVehCol(%s, %i, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelC1], NTD_TD[i][TD_PrevModelC2]);
									fwrite(file, EditorString);
									
								}
								fwrite(file, "\n");
							}
						}					
						if(NTD_TD[i][TD_Selectable])
							clickableTD = true;
					}
				}
				else //NON ARRAY
				{
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "\t%s = TextDrawCreate(%f, %f, \x22%s\x22);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_Text]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tTextDrawFont(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Font]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tTextDrawLetterSize(%s, %f, %f);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_LetterSizeX], NTD_TD[i][TD_LetterSizeY]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tTextDrawTextSize(%s, %f, %f);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tTextDrawSetOutline(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_OutlineSize]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tTextDrawSetShadow(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_ShadowSize]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tTextDrawAlignment(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Alignment]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tTextDrawColor(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Color]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tTextDrawBackgroundColor(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_BGColor]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tTextDrawBoxColor(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_BoxColor]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tTextDrawUseBox(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_UseBox]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tTextDrawSetProportional(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Proportional]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tTextDrawSetSelectable(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Selectable]);
							fwrite(file, EditorString);
							if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_MODEL_PREVIEW)
							{
								format(EditorString, sizeof EditorString, "\tTextDrawSetPreviewModel(%s, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelID]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawSetPreviewRot(%s, %f, %f, %f, %f);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PrevRotX], NTD_TD[i][TD_PrevRotY], NTD_TD[i][TD_PrevRotZ], NTD_TD[i][TD_PrevRotZoom]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tTextDrawSetPreviewVehCol(%s, %i, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelC1], NTD_TD[i][TD_PrevModelC2]);
								fwrite(file, EditorString);
								
							}
							fwrite(file, "\n");
							if(NTD_TD[i][TD_Selectable])
								clickableTD = true;
						}					
						
					}
				}
				fwrite(file, "\treturn 1;\n}\n");
				fwrite(file, "\npublic OnFilterScriptExit()\n{\n");
				if(intoarray) //ARRAY
				{
					publiccount = 0;
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR && strlen(NTD_TD[i][TD_VarName]) == 0)
						{
							format(EditorString, sizeof EditorString, "\tTextDrawDestroy(PublicTD[%i]);\n", publiccount);
							fwrite(file, EditorString);
							publiccount++;
						}
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_IsGlobal]  && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR && strlen(NTD_TD[i][TD_VarName]) != 0)
						{
							format(EditorString, sizeof EditorString, "\tTextDrawDestroy(%s);\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
				}
				else //NON ARRAY
				{
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "\tTextDrawDestroy(%s);\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
				}
				fwrite(file, "\treturn 1;\n}\n");
				
				fwrite(file, "\npublic OnPlayerConnect(playerid)\n{\n");
				if(intoarray) //ARRAY
				{
					nonpubliccount = 0;
					barscount = 0;
					foreach(new i : I_TEXTDRAWS)
					{
						if(!NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							if(strlen(NTD_TD[i][TD_VarName]) == 0) //Non Custom var name
							{
								format(EditorString, sizeof EditorString, "\tPlayerTD[playerid][%i] = CreatePlayerTextDraw(playerid, %f, %f, \x22%s\x22);\n", nonpubliccount, NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_Text]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawFont(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_Font]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawLetterSize(playerid, PlayerTD[playerid][%i], %f, %f);\n", nonpubliccount, NTD_TD[i][TD_LetterSizeX], NTD_TD[i][TD_LetterSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawTextSize(playerid, PlayerTD[playerid][%i], %f, %f);\n", nonpubliccount, NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetOutline(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_OutlineSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetShadow(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_ShadowSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawAlignment(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_Alignment]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawColor(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_Color]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawBackgroundColor(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_BGColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawBoxColor(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_BoxColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawUseBox(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_UseBox]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetProportional(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_Proportional]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetSelectable(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_Selectable]);
								fwrite(file, EditorString);
								if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_MODEL_PREVIEW)
								{
									format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetPreviewModel(playerid, PlayerTD[playerid][%i], %i);\n", nonpubliccount, NTD_TD[i][TD_PrevModelID]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetPreviewRot(playerid, PlayerTD[playerid][%i], %f, %f, %f, %f);\n", nonpubliccount, NTD_TD[i][TD_PrevRotX], NTD_TD[i][TD_PrevRotY], NTD_TD[i][TD_PrevRotZ], NTD_TD[i][TD_PrevRotZoom]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetPreviewVehCol(playerid, PlayerTD[playerid][%i], %i, %i);\n", nonpubliccount, NTD_TD[i][TD_PrevModelC1], NTD_TD[i][TD_PrevModelC2]);
									fwrite(file, EditorString);
								}
								fwrite(file, "\n");
								nonpubliccount++;
							}
							else //Custom var name
							{
								format(EditorString, sizeof EditorString, "\t%s[playerid] = CreatePlayerTextDraw(playerid, %f, %f, \x22%s\x22);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_Text]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawFont(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Font]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawLetterSize(playerid, %s[playerid], %f, %f);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_LetterSizeX], NTD_TD[i][TD_LetterSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawTextSize(playerid, %s[playerid], %f, %f);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetOutline(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_OutlineSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetShadow(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_ShadowSize]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawAlignment(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Alignment]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawColor(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Color]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawBackgroundColor(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_BGColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawBoxColor(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_BoxColor]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawUseBox(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_UseBox]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetProportional(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Proportional]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetSelectable(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_Selectable]);
								fwrite(file, EditorString);
								if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_MODEL_PREVIEW)
								{
									format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetPreviewModel(playerid, %s[playerid], %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelID]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetPreviewRot(playerid, %s[playerid], %f, %f, %f, %f);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PrevRotX], NTD_TD[i][TD_PrevRotY], NTD_TD[i][TD_PrevRotZ], NTD_TD[i][TD_PrevRotZoom]);
									fwrite(file, EditorString);
									format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetPreviewVehCol(playerid, %s[playerid], %i, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelC1], NTD_TD[i][TD_PrevModelC2]);
									fwrite(file, EditorString);
								}
								fwrite(file, "\n");
							}
						}
						if(NTD_TD[i][TD_Selectable])
							clickableTD = true;
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							
							if(strlen(NTD_TD[i][TD_VarName]) == 0) //Non Custom var name
							{
								format(EditorString, sizeof EditorString, "\tPlayerProgressBar[playerid][%i] = CreatePlayerProgressBar(playerid, %f, %f, %f, %f, %i, %f, %i);\n", barscount, NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY], NTD_TD[i][TD_Color], NTD_TD[i][TD_BarMaxPercentage], NTD_TD[i][TD_BarDirectory]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tSetPlayerProgressBarValue(playerid, PlayerProgressBar[playerid][%i], %f);\n", barscount, (NTD_TD[i][TD_BarMaxPercentage] / 2.0));
								fwrite(file, EditorString);
								fwrite(file, "\n");
								barscount++;
							}
							else //Custom var name
							{
								format(EditorString, sizeof EditorString, "\t%s[playerid] = CreatePlayerProgressBar(playerid, %f, %f, %f, %f, %i, %f, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY], NTD_TD[i][TD_Color], NTD_TD[i][TD_BarMaxPercentage], NTD_TD[i][TD_BarDirectory]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tSetPlayerProgressBarValue(playerid, %s[playerid], %f);\n", GetProcessedTDVarName(i), (NTD_TD[i][TD_BarMaxPercentage] / 2.0));
								fwrite(file, EditorString);
								fwrite(file, "\n");
							}
						}
					}
				}
				else //NON ARRAY
				{
					foreach(new i : I_TEXTDRAWS)
					{
						if(!NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "\t%s[playerid] = CreatePlayerTextDraw(playerid, %f, %f, \x22%s\x22);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_Text]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tPlayerTextDrawFont(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Font]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tPlayerTextDrawLetterSize(playerid, %s[playerid], %f, %f);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_LetterSizeX], NTD_TD[i][TD_LetterSizeY]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tPlayerTextDrawTextSize(playerid, %s[playerid], %f, %f);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetOutline(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_OutlineSize]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetShadow(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_ShadowSize]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tPlayerTextDrawAlignment(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Alignment]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tPlayerTextDrawColor(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Color]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tPlayerTextDrawBackgroundColor(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_BGColor]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tPlayerTextDrawBoxColor(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_BoxColor]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tPlayerTextDrawUseBox(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_UseBox]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetProportional(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Proportional]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetSelectable(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_Selectable]);
							fwrite(file, EditorString);
							if(NTD_TD[i][TD_Selectable])
								clickableTD = true;
							if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_MODEL_PREVIEW)
							{
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetPreviewModel(playerid, %s[playerid], %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelID]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetPreviewRot(playerid, %s[playerid], %f, %f, %f, %f);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PrevRotX], NTD_TD[i][TD_PrevRotY], NTD_TD[i][TD_PrevRotZ], NTD_TD[i][TD_PrevRotZoom]);
								fwrite(file, EditorString);
								format(EditorString, sizeof EditorString, "\tPlayerTextDrawSetPreviewVehCol(playerid, %s[playerid], %i, %i);\n", GetProcessedTDVarName(i), NTD_TD[i][TD_PrevModelC1], NTD_TD[i][TD_PrevModelC2]);
								fwrite(file, EditorString);
							}
							fwrite(file, "\n");
							
						}
						if(NTD_TD[i][TD_Selectable])
							clickableTD = true;		
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "\t%s[playerid] = CreatePlayerProgressBar(playerid, %f, %f, %f, %f, %i, %f, %i);\n",  GetProcessedTDVarName(i), NTD_TD[i][TD_PosX], NTD_TD[i][TD_PosY], NTD_TD[i][TD_BoxSizeX], NTD_TD[i][TD_BoxSizeY], NTD_TD[i][TD_Color], NTD_TD[i][TD_BarMaxPercentage], NTD_TD[i][TD_BarDirectory]);
							fwrite(file, EditorString);
							format(EditorString, sizeof EditorString, "\tSetPlayerProgressBarValue(playerid, %s[playerid], %f);\n", GetProcessedTDVarName(i), (NTD_TD[i][TD_BarMaxPercentage] / 2.0));
							fwrite(file, EditorString);
							fwrite(file, "\n");
						}
					}
				}
				fwrite(file, "\treturn 1;\n}\n");
				fwrite(file, "\npublic OnPlayerDisconnect(playerid, reason)\n{\n");
				if(intoarray) //ARRAY
				{
					nonpubliccount = 0;
					barscount = 0;
					foreach(new i : I_TEXTDRAWS)
					{
						if(!NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR && strlen(NTD_TD[i][TD_VarName]) == 0)
						{
							format(EditorString, sizeof EditorString, "\tPlayerTextDrawDestroy(playerid, PlayerTD[playerid][%i]);\n", nonpubliccount);
							fwrite(file, EditorString);
							nonpubliccount++;
						}
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(!NTD_TD[i][TD_IsGlobal]  && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR && strlen(NTD_TD[i][TD_VarName]) != 0)
						{
							format(EditorString, sizeof EditorString, "\tPlayerTextDrawDestroy(playerid, %s[playerid]);\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							if(strlen(NTD_TD[i][TD_VarName]) == 0)
							{
								format(EditorString, sizeof EditorString, "\tDestroyPlayerProgressBar(playerid, PlayerProgressBar[playerid][%i]);\n", barscount);
								fwrite(file, EditorString);
								barscount++;
							}
							else
							{
								format(EditorString, sizeof EditorString, "\tDestroyPlayerProgressBar(playerid, %s[playerid]);\n", GetProcessedTDVarName(i));
								fwrite(file, EditorString);
							}
						}
					}
				}
				else //NON ARRAY
				{
					foreach(new i : I_TEXTDRAWS)
					{
						if(!NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "\tPlayerTextDrawDestroy(playerid, %s[playerid]);\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "\tDestroyPlayerProgressBar(playerid, %s[playerid]);\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
				}
				fwrite(file, "\treturn 1;\n}\n");
				
				fwrite(file, "\npublic OnPlayerCommandText(playerid, cmdtext[])\n{\n");
				fwrite(file, "\tif(!strcmp(cmdtext, \x22/tdtest\x22, true))\n\t{\n");
				if(intoarray) //ARRAY
				{
					publiccount = 0;
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR && strlen(NTD_TD[i][TD_VarName]) == 0)
						{
							format(EditorString, sizeof EditorString, "\t\tTextDrawShowForPlayer(playerid, PublicTD[%i]);\n", publiccount);
							fwrite(file, EditorString);
							publiccount++;
						}
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR && strlen(NTD_TD[i][TD_VarName]) != 0)
						{
							format(EditorString, sizeof EditorString, "\t\tTextDrawShowForPlayer(playerid, %s);\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
				}
				else //NON ARRAY
				{
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "\t\tTextDrawShowForPlayer(playerid, %s);\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
				}
				if(intoarray) //ARRAY
				{
					nonpubliccount = 0;
					foreach(new i : I_TEXTDRAWS)
					{
						if(!NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR && strlen(NTD_TD[i][TD_VarName]) == 0)
						{
							format(EditorString, sizeof EditorString, "\t\tPlayerTextDrawShow(playerid, PlayerTD[playerid][%i]);\n", nonpubliccount);
							fwrite(file, EditorString);
							nonpubliccount++;
						}
					}
					foreach(new i : I_TEXTDRAWS)
					{
						if(!NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR && strlen(NTD_TD[i][TD_VarName]) != 0)
						{
							format(EditorString, sizeof EditorString, "\t\tPlayerTextDrawShow(playerid, %s[playerid]);\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
				}
				else //NON ARRAY
				{
					foreach(new i : I_TEXTDRAWS)
					{
						if(!NTD_TD[i][TD_IsGlobal] && NTD_TD[i][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "\t\tPlayerTextDrawShow(playerid, %s[playerid]);\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
				}
				if(intoarray) //ARRAY
				{
					barscount = 0;
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							if(strlen(NTD_TD[i][TD_VarName]) == 0)
							{
								format(EditorString, sizeof EditorString, "\t\tShowPlayerProgressBar(playerid, PlayerProgressBar[playerid][%i]);\n", barscount);
								fwrite(file, EditorString);
								barscount++;
							}
							else
							{
								format(EditorString, sizeof EditorString, "\t\tShowPlayerProgressBar(playerid, %s[playerid]);\n", GetProcessedTDVarName(i));
								fwrite(file, EditorString);
							}
						}
					}
				}
				else
				{
					foreach(new i : I_TEXTDRAWS)
					{
						if(NTD_TD[i][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR)
						{
							format(EditorString, sizeof EditorString, "\t\tShowPlayerProgressBar(playerid, %s[playerid]);\n", GetProcessedTDVarName(i));
							fwrite(file, EditorString);
						}
					}
				}
				
				if(clickableTD) 
					fwrite(file, "\t\tSelectTextDraw(playerid, 0xFF0000FF);\n");
				fwrite(file, "\t\treturn 1;\n\t}\n");
				fwrite(file, "\treturn 0;\n}\n");
			}
			fclose(file);
			return 1;
		}
	}

	return 0;
}

AddProjectToList(const file[])
{
	new index = Iter_Free(I_PROJECTS);
	new extension[16];
	VALID_ITER_INDEX(I_PROJECTS, index)
	{
		NTD_Projects[index][Pro_fileExtensionId] = -1;
		sscanf(file, "P<.>s[128]s[16]", NTD_Projects[index][Pro_fileName], extension);
		for(new i; i < sizeof Extensions; i++)
		{
			if(!strcmp(Extensions[i][fe_extension], extension, true))
			{
				NTD_Projects[index][Pro_fileExtensionId] = Extensions[i][fe_extensionId];
				break;
			}
		}
		//printf("File: %s | Extension: %s | Extension ID: %i", NTD_Projects[index][Pro_fileName], extension, NTD_Projects[index][Pro_fileExtensionId]);
		Iter_Add(I_PROJECTS, index);
		return 1;
	}
	return 0;
}

ReadProjectsDirectory()
{
	Iter_Clear(I_PROJECTS);

	new Directory:dir = OpenDir(MakePath(PROJECTS_DIRECTORYPATH, true));
	new item[256], ENTRY_TYPE:type;
		
	while(DirNext(dir, type, item)) 
	{
		if(type == E_REGULAR) 
		{
			PathBase(item, item);
			AddProjectToList(item);
		}
    }


	CloseDir(dir);
	return 1;
}

IsProjectFileValid(index)
{
	if(NTD_Projects[index][Pro_fileExtensionId] == -1)
		return 0;
	new filePath[256];
	format(filePath, sizeof filePath, "%s/%s.%s", PROJECTS_DIRECTORYPATH, NTD_Projects[index][Pro_fileName], Extensions[ NTD_Projects[index][Pro_fileExtensionId] ]);
	if(NTD_Projects[index][Pro_fileExtensionId] != -1 && Exists(filePath))
	{
		return 1;
	}
	return 0;
}

OpenProjectDialog(playerid)
{
	ClearDialogListitems(playerid);
	// Get Projects
	ReadProjectsDirectory();
	AddDialogListitem(playerid, GetLanguageMessage("projectslist", LANG_TYPE_DIALOGS, "infos"));
	if(Iter_Count(I_PROJECTS) > 0)
	{
		foreach(new i : I_PROJECTS)
		{
			if(NTD_Projects[i][Pro_fileExtensionId] == FILE_EXTENSION_NTD)
			{
				AddDialogListitem(playerid, "%s%s", (IsProjectFileValid(i) ? "{FFFFFF}" : "{FFFFFF}"), NTD_Projects[i][Pro_fileName]);
			}
			else 
			{
				AddDialogListitem(playerid, "%s%s", (IsProjectFileValid(i) ? "{FFE599}" : "{FFE599}"), NTD_Projects[i][Pro_fileName]);
			}

			
		}
		//
		
		ShowPlayerDialog(playerid, DIALOG_OPEN, DIALOG_STYLE_TABLIST, 
		GetLanguageMessage("projectslist", LANG_TYPE_DIALOGS, "caption", "ii", Iter_Count(I_PROJECTS), MAX_NTD_PROJECTS), #, 
		GetLanguageMessage("projectslist", LANG_TYPE_DIALOGS, "button1"), 
		GetLanguageMessage("projectslist", LANG_TYPE_DIALOGS, "button2"), 
		EditorMaxDialogItems);
		PlayerSelectTD(playerid, false);
	}
	else 
	{
		ShowInfo(playerid, GetLanguageMessage("noprojectsfound", LANG_TYPE_MESSAGES));
	}
	return 1;
}

SaveProject(index)
{
	if(NTD_User[User_ProjectOpened])
	{
		new filePath[300];
	
		//Project File Path
		format(filePath, sizeof filePath, PROJECTS_DIRECTORYPATH"/%s", GetProjectName(index, true));
		filePath = MakePath(filePath, true);

		// Node
		new Node:node;
		node = JSON_Object(
			"textdraws", JSON_Array()
		);

		// TextDraws
		foreach(new i : I_TEXTDRAWS)
		{
			if(NTD_TD[i][TD_Created])
			{
				new Node:tdNode = JSON_Object(
				"string", JSON_String(NTD_TD[i][TD_Text]),
				"posx", JSON_Float(NTD_TD[i][TD_PosX]),
				"posy", JSON_Float(NTD_TD[i][TD_PosY]),
				"font", JSON_Int(NTD_TD[i][TD_Font]),
				"public", JSON_Bool(NTD_TD[i][TD_IsGlobal]),
				"outline", JSON_Int(NTD_TD[i][TD_OutlineSize]),
				"shadow", JSON_Int(NTD_TD[i][TD_ShadowSize]),
				"lettersizex", JSON_Float(NTD_TD[i][TD_LetterSizeX]),
				"lettersizey", JSON_Float(NTD_TD[i][TD_LetterSizeY]),
				"textcolor", JSON_Int(NTD_TD[i][TD_Color]),
				"backgroundcolor", JSON_Int(NTD_TD[i][TD_BGColor]),
				"boxcolor", JSON_Int(NTD_TD[i][TD_BoxColor]),
				"textcoloralpha", JSON_Int(NTD_TD[i][TD_ColorAlpha]),
				"backgroundcoloralpha", JSON_Int(NTD_TD[i][TD_BGColorAlpha]),
				"boxcoloralpha", JSON_Int(NTD_TD[i][TD_BoxColorAlpha]),
				"usebox", JSON_Bool(NTD_TD[i][TD_UseBox]),
				"boxsizex", JSON_Float(NTD_TD[i][TD_BoxSizeX]),
				"boxsizey", JSON_Float(NTD_TD[i][TD_BoxSizeY]),
				"selectable", JSON_Bool(NTD_TD[i][TD_Selectable]),
				"alignment", JSON_Int(NTD_TD[i][TD_Alignment]),
				"proportional", JSON_Bool(NTD_TD[i][TD_Proportional]),
				"previewmodelid", JSON_Int(NTD_TD[i][TD_PrevModelID]),
				"previewmodelcolor1", JSON_Int(NTD_TD[i][TD_PrevModelC1]),
				"previewmodelcolor2", JSON_Int(NTD_TD[i][TD_PrevModelC2]),
				"previewmodelrotx", JSON_Float(NTD_TD[i][TD_PrevRotX]),
				"previewmodelroty", JSON_Float(NTD_TD[i][TD_PrevRotY]),
				"previewmodelrotz", JSON_Float(NTD_TD[i][TD_PrevRotZ]),
				"previewmodelzoom", JSON_Float(NTD_TD[i][TD_PrevRotZoom]),
				"variablename", JSON_String(NTD_TD[i][TD_VarName]),
				"progressbarmaxpercentage", JSON_Float(NTD_TD[i][TD_BarMaxPercentage]),
				"progressbaralignment", JSON_Int(NTD_TD[i][TD_BarDirectory])
				);
				// Append current textdraw to array.
				JSON_ArrayAppend(node, "textdraws", tdNode);
			}
		}

		// Save File
		JSON_SaveFile(filePath, node);
		return 1;
	}
	return 0;
}

LoadProject(index)
{
	new filePath[258], Node:node, free, Node:arrayNode, Node:tdnode, length;
	format(filePath, sizeof filePath, PROJECTS_DIRECTORYPATH"/%s", GetProjectName(index, true));
	filePath = MakePath(filePath, true);
	if(Exists(filePath))
	{
		// Reset the TextDraw iterator.
		Iter_Clear(I_TEXTDRAWS);

		// Reset the TextDraw enumerator
		for(new i; i < MAX_NTD_TDS; i++)
		{
			NTD_TD[i][TD_Created] = false;
			format(NTD_TD[i][TD_VarName], 35, "");
			NTD_TD[i][TD_HighlightTimer] = -1;
			NTD_TD[i][TD_BarID] = INVALID_PLAYER_BAR_ID;
			NTD_TD[i][TD_SelfID] = Text:INVALID_TEXT_DRAW;
			NTD_TD[i][TD_BarMaxPercentage] = 100.0;
			NTD_TD[i][TD_BarDirectory] = BAR_DIRECTION_RIGHT;
		}
		
		// Parsing project File
		JSON_ParseFile(filePath, node);

		// Get th TextDraw Array
		JSON_GetArray(node, "textdraws", arrayNode);

		// Get the Array length
		JSON_ArrayLength(arrayNode, length);

		// Loop through the Array
		for(new i; i < length; i++)
		{
			
			// Get the TextDraw Object Node
			JSON_ArrayObject(arrayNode, i, tdnode);

			// Create the TextDraw
			free = Iter_Free(I_TEXTDRAWS);
			VALID_ITER_INDEX(I_TEXTDRAWS, free)
			{
				Iter_Add(I_TEXTDRAWS, free);
				JSON_GetString(tdnode, "string", NTD_TD[free][TD_Text]);
				JSON_GetFloat(tdnode, "posx", NTD_TD[free][TD_PosX]);
				JSON_GetFloat(tdnode, "posy", NTD_TD[free][TD_PosY]);
				JSON_GetInt(tdnode, "font", NTD_TD[free][TD_Font]);
				JSON_GetBool(tdnode, "public", NTD_TD[free][TD_IsGlobal]);
				JSON_GetInt(tdnode, "outline", NTD_TD[free][TD_OutlineSize]);
				JSON_GetInt(tdnode, "shadow", NTD_TD[free][TD_ShadowSize]);
				JSON_GetFloat(tdnode, "lettersizex", NTD_TD[free][TD_LetterSizeX]);
				JSON_GetFloat(tdnode, "lettersizey", NTD_TD[free][TD_LetterSizeY]);
				JSON_GetInt(tdnode, "textcolor", NTD_TD[free][TD_Color]);
				JSON_GetInt(tdnode, "backgroundcolor", NTD_TD[free][TD_BGColor]);
				JSON_GetInt(tdnode, "boxcolor", NTD_TD[free][TD_BoxColor]);
				JSON_GetInt(tdnode, "textcoloralpha", NTD_TD[free][TD_ColorAlpha]);
				JSON_GetInt(tdnode, "backgroundcoloralpha", NTD_TD[free][TD_BGColorAlpha]);
				JSON_GetInt(tdnode, "boxcoloralpha", NTD_TD[free][TD_BoxColorAlpha]);
				JSON_GetBool(tdnode, "usebox", NTD_TD[free][TD_UseBox]);
				JSON_GetBool(tdnode, "selectable", NTD_TD[free][TD_Selectable]);
				JSON_GetInt(tdnode, "alignment", NTD_TD[free][TD_Alignment]);
				JSON_GetFloat(tdnode, "boxsizex", NTD_TD[free][TD_BoxSizeX]);
				JSON_GetFloat(tdnode, "boxsizey", NTD_TD[free][TD_BoxSizeY]);
				JSON_GetInt(tdnode, "proportional", NTD_TD[free][TD_Proportional]);
				JSON_GetInt(tdnode, "previewmodelid", NTD_TD[free][TD_PrevModelID]);
				JSON_GetInt(tdnode, "previewmodelcolor1", NTD_TD[free][TD_PrevModelC1]);
				JSON_GetInt(tdnode, "previewmodelcolor2", NTD_TD[free][TD_PrevModelC2]);
				JSON_GetFloat(tdnode, "previewmodelrotx", NTD_TD[free][TD_PrevRotX]);
				JSON_GetFloat(tdnode, "previewmodelroty", NTD_TD[free][TD_PrevRotY]);
				JSON_GetFloat(tdnode, "previewmodelrotz", NTD_TD[free][TD_PrevRotZ]);
				JSON_GetFloat(tdnode, "previewmodelzoom", NTD_TD[free][TD_PrevRotZoom]);
				JSON_GetInt(tdnode, "variablename", NTD_TD[free][TD_VarName]);
				JSON_GetFloat(tdnode, "progressbarmaxpercentage", NTD_TD[free][TD_BarMaxPercentage]);
				JSON_GetInt(tdnode, "progressbaralignment", NTD_TD[free][TD_BarDirectory]);
				NTD_TD[free][TD_Created] = true;
			}
			else break;
		}
		NTD_User[User_ProjectOpened] = true;
		NTD_User[User_ProjectIndex] = index;
		return 1;
	}
	return 0;
}

GetProjectName(index, bool:withExtension = false)
{
	new projectName[258];
	format(projectName, 258, NTD_Projects[index][Pro_fileName]);
	if(withExtension)
	{
		strcat(projectName, ".");
		strcat(projectName, Extensions[ NTD_Projects[index][Pro_fileExtensionId] ][fe_extension]);
	}
	return projectName;
}

DeleteProject(index, bool:force = true)
{
	new filePath[128];
	format(filePath, sizeof filePath, PROJECTS_DIRECTORYPATH"/%s", GetProjectName(index, true));
	if(!force)
	{
		if(Exists( MakePath(filePath, true) ))
		{
			fremove(filePath);
		}
	}
	else
	{
		if(Exists( MakePath(filePath, true) ))
			fremove(filePath);
		return 1;
	}
	return 0;
}



/*
  _______                 _     _____                                ______                          _     _                       
 |__   __|               | |   |  __ \                              |  ____|                        | |   (_)                      
    | |      ___  __  __ | |_  | |  | |  _ __    __ _  __      __   | |__     _   _   _ __     ___  | |_   _    ___    _ __    ___ 
    | |     / _ \ \ \/ / | __| | |  | | | '__|  / _` | \ \ /\ / /   |  __|   | | | | | '_ \   / __| | __| | |  / _ \  | '_ \  / __|
    | |    |  __/  >  <  | |_  | |__| | | |    | (_| |  \ V  V /    | |      | |_| | | | | | | (__  | |_  | | | (_) | | | | | \__ \ 
    |_|     \___| /_/\_\  \__| |_____/  |_|     \__,_|   \_/\_/     |_|       \__,_| |_| |_|  \___|  \__| |_|  \___/  |_| |_| |___/
                                                                                                                                                                                                                                                               
*/
ShowTDOptions(playerid, tdid)
{
	NTD_User[User_ChoosenTDID] = tdid;
	ShowPlayerDialog(playerid, DIALOG_MANAGE2, DIALOG_STYLE_LIST, 
	GetLanguageMessage("tdoptions", LANG_TYPE_DIALOGS, "caption", "is", tdid, NTD_TD[ tdid ][TD_Text]), 
	GetLanguageMessage("tdoptions", LANG_TYPE_DIALOGS, "infos"), 
	GetLanguageMessage("tdoptions", LANG_TYPE_DIALOGS, "button1"), 
	GetLanguageMessage("tdoptions", LANG_TYPE_DIALOGS, "button2"));
	PlayerSelectTD(playerid, false);
	return 1;
}

SwapTDLayers(tdid, tolayer)
{
	if(tolayer == Iter_Begin(I_TEXTDRAWS) || tolayer == Iter_End(I_TEXTDRAWS)) 
		return -1;
	new old_td_data[E_TD];
	old_td_data = NTD_TD[tdid];
	//Swapping enums
	NTD_TD[tdid] = NTD_TD[tolayer];
	NTD_TD[tolayer] = old_td_data;
	return tolayer;
}

UpdateTD(playerid, td)
{
	new red,green,blue,alpha;
	#pragma unused alpha
	if(NTD_TD[td][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
	{
		if(NTD_TD[td][TD_BarID] != INVALID_PLAYER_BAR_ID)
		{
			DestroyPlayerProgressBar(playerid, NTD_TD[td][TD_BarID]);
			NTD_TD[td][TD_BarID] = INVALID_PLAYER_BAR_ID;
		}
		if(NTD_TD[td][TD_SelfID] == Text:INVALID_TEXT_DRAW)
			NTD_TD[td][TD_SelfID] = TextDrawCreate(NTD_TD[td][TD_PosX], NTD_TD[td][TD_PosY], NTD_TD[td][TD_Text]);
		TextDrawFont(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_Font]);
		TextDrawSetOutline(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_OutlineSize]);
		TextDrawSetShadow(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_ShadowSize]);
		TextDrawLetterSize(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_LetterSizeX], NTD_TD[td][TD_LetterSizeY]);
		SplitRGBA(NTD_TD[td][TD_Color],red,green,blue, alpha); 
		NTD_TD[td][TD_Color] = CreateRGBA(red,green,blue,NTD_TD[td][TD_ColorAlpha]);
		TextDrawColor(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_Color]);
		SplitRGBA(NTD_TD[td][TD_BGColor],red,green,blue, alpha);
		NTD_TD[td][TD_BGColor] = CreateRGBA(red,green,blue,NTD_TD[td][TD_BGColorAlpha]);
		TextDrawBackgroundColor(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_BGColor]);
		SplitRGBA(NTD_TD[td][TD_BoxColor],red,green,blue, alpha); 
		NTD_TD[td][TD_BoxColor] = CreateRGBA(red,green,blue,NTD_TD[td][TD_BoxColorAlpha]);
		TextDrawBoxColor(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_BoxColor]);
		TextDrawUseBox(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_UseBox]);	
		TextDrawTextSize(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_BoxSizeX], NTD_TD[td][TD_BoxSizeY]);
		TextDrawSetSelectable(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_Selectable]);
		TextDrawAlignment(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_Alignment]);
		TextDrawSetProportional(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_Proportional]);
		TextDrawSetPreviewModel(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_PrevModelID]);
		TextDrawSetPreviewRot(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_PrevRotX], NTD_TD[td][TD_PrevRotY], NTD_TD[td][TD_PrevRotZ], NTD_TD[td][TD_PrevRotZoom]);
		TextDrawSetPreviewVehCol(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_PrevModelC1], NTD_TD[td][TD_PrevModelC2]);
		if(!EditorTextDrawShowForAll) TextDrawShowForPlayer(playerid, NTD_TD[td][TD_SelfID]);
		else TextDrawShowForAll(NTD_TD[td][TD_SelfID]);
	}
	else
	{
		if(NTD_TD[td][TD_SelfID] != Text:INVALID_TEXT_DRAW)
		{
			TextDrawDestroy(NTD_TD[td][TD_SelfID]);
			NTD_TD[td][TD_SelfID] = Text:INVALID_TEXT_DRAW;
		}
		if(NTD_TD[td][TD_BarID] == INVALID_PLAYER_BAR_ID)
		{
			SplitRGBA(NTD_TD[td][TD_Color],red,green,blue, alpha); 
			NTD_TD[td][TD_Color] = CreateRGBA(red,green,blue,NTD_TD[td][TD_ColorAlpha]);
			NTD_TD[td][TD_BarID] = CreatePlayerProgressBar(playerid, 
			NTD_TD[td][TD_PosX], 
			NTD_TD[td][TD_PosY], 
			NTD_TD[td][TD_BoxSizeX], 
			NTD_TD[td][TD_BoxSizeY],
			NTD_TD[td][TD_Color], 
			NTD_TD[td][TD_BarMaxPercentage],
			NTD_TD[td][TD_BarDirectory]);
		}
		if(NTD_TD[td][TD_BarID] != INVALID_PLAYER_BAR_ID)
		{
			SplitRGBA(NTD_TD[td][TD_Color],red,green,blue, alpha); 
			NTD_TD[td][TD_Color] = CreateRGBA(red,green,blue,NTD_TD[td][TD_ColorAlpha]);
			SetPlayerProgressBarDirection(playerid, NTD_TD[td][TD_BarID], NTD_TD[td][TD_BarDirectory]);
			SetPlayerProgressBarColour(playerid, NTD_TD[td][TD_BarID], NTD_TD[td][TD_Color]);
			SetPlayerProgressBarWidth(playerid, NTD_TD[td][TD_BarID], NTD_TD[td][TD_BoxSizeX]);
			SetPlayerProgressBarHeight(playerid, NTD_TD[td][TD_BarID], NTD_TD[td][TD_BoxSizeY]);
			SetPlayerProgressBarMaxValue(playerid, NTD_TD[td][TD_BarID], NTD_TD[td][TD_BarMaxPercentage]);
			SetPlayerProgressBarValue(playerid, NTD_TD[td][TD_BarID], (NTD_TD[td][TD_BarMaxPercentage] / 2.0));
			ShowPlayerProgressBar(playerid, NTD_TD[td][TD_BarID]);
		}
	}
	return 1;
}

SelectTD(playerid, tdid)
{
	if(tdid != NTD_User[User_EditingTDID])
	{
		new ptdid = NTD_User[User_EditingTDID];
		NTD_User[User_EditingTDID] = tdid;
		//
		new tmp_str[12];
		format(EditorString, sizeof EditorString, GetLanguageMessage("tdselectedinfo", LANG_TYPE_GAMETEXTS));
		format(tmp_str, sizeof tmp_str, "%i", NTD_User[User_EditingTDID]);
		strreplace(EditorString, "#1", tmp_str);
		//
		GameTextForPlayer(playerid, EditorString, 5000, 6);
		PlayerPlaySound(playerid, CONFIRM_SOUNDID, 0.0, 0.0, 0.0);
		HighlightTD(playerid, NTD_User[User_EditingTDID]);
		ShowEditorEx(playerid);
		TextDrawColor(NTD_TD[tdid][TD_PickerID], TDPICKER_COLOR_ACTIVE);
		if(EditorQuickSelect) TextDrawShowForPlayer(playerid, NTD_TD[tdid][TD_PickerID]);
		if(ptdid != -1 && tdid != ptdid)
		{
			TextDrawColor(NTD_TD[ptdid][TD_PickerID], TDPICKER_COLOR);
			if(EditorQuickSelect) TextDrawShowForPlayer(playerid, NTD_TD[ptdid][TD_PickerID]);
		}
		return 1;
	}
	return 0;
}

DestroyTD(td, &next)
{
	if(NTD_TD[td][TD_Created] == true)
	{
		new playerid = NTD_User[User_PlayerIDInEditor];
		NTD_TD[td][TD_Created] = false;
		if(NTD_TD[td][TD_SelfID] != Text:INVALID_TEXT_DRAW)
		{
			TextDrawDestroy(NTD_TD[td][TD_SelfID]);
			NTD_TD[td][TD_SelfID] = Text:INVALID_TEXT_DRAW;
		}
		if(NTD_TD[td][TD_BarID] != INVALID_PLAYER_BAR_ID)
		{
			DestroyPlayerProgressBar(playerid, NTD_TD[td][TD_BarID]);
			NTD_TD[td][TD_BarID] = INVALID_PLAYER_BAR_ID;
		}
		TextDrawDestroy(NTD_TD[td][TD_PickerID]);
		Iter_SafeRemove(I_TEXTDRAWS, td, next);
	}
}

HighlightTD(playerid, td)
{
	if(NTD_TD[td][TD_SelfID] != Text:INVALID_TEXT_DRAW)
	{
		TextDrawColor(NTD_TD[td][TD_SelfID], 0xFFFF00FF);
		TextDrawBackgroundColor(NTD_TD[td][TD_SelfID], 0xFFFF00FF);
		TextDrawBoxColor(NTD_TD[td][TD_SelfID], 0xFFFF00FF);
		TextDrawShowForPlayer(playerid, NTD_TD[td][TD_SelfID]);
	}
	else if(NTD_TD[td][TD_BarID] != INVALID_PLAYER_BAR_ID)
	{
		SetPlayerProgressBarColour(playerid, NTD_TD[td][TD_BarID], 0xFFFF00FF);
		ShowPlayerProgressBar(playerid, NTD_TD[td][TD_BarID]);
	}
	if(NTD_TD[td][TD_HighlightTimer] != -1)
		KillTimer(NTD_TD[td][TD_HighlightTimer]);
	NTD_TD[td][TD_HighlightTimer] = SetTimerEx("HLTD", 250, false, "ii", playerid, td);
	return 1;
}

DrawTD(td)
{
	new playerid = NTD_User[User_PlayerIDInEditor];
	new red, green, blue, alpha;
	#pragma unused alpha
	if(NTD_TD[td][TD_Created] == true)
	{
		//TD
		if(NTD_TD[td][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
		{
			NTD_TD[td][TD_SelfID] = TextDrawCreate(NTD_TD[td][TD_PosX], NTD_TD[td][TD_PosY], NTD_TD[td][TD_Text]);
			TextDrawFont(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_Font]);
			TextDrawSetOutline(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_OutlineSize]);
			TextDrawSetShadow(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_ShadowSize]);
			TextDrawLetterSize(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_LetterSizeX], NTD_TD[td][TD_LetterSizeY]);
			//
			SplitRGBA(NTD_TD[td][TD_Color],red,green,blue, alpha); 
			NTD_TD[td][TD_Color] = CreateRGBA(red,green,blue,NTD_TD[td][TD_ColorAlpha]);
			TextDrawColor(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_Color]);
			//
			SplitRGBA(NTD_TD[td][TD_BGColor],red,green,blue, alpha);
			NTD_TD[td][TD_BGColor] = CreateRGBA(red,green,blue,NTD_TD[td][TD_BGColorAlpha]);
			TextDrawBackgroundColor(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_BGColor]);
			//
			SplitRGBA(NTD_TD[td][TD_BoxColor],red,green,blue, alpha); 
			NTD_TD[td][TD_BoxColor] = CreateRGBA(red,green,blue,NTD_TD[td][TD_BoxColorAlpha]);
			TextDrawBoxColor(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_BoxColor]);
			//
			TextDrawUseBox(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_UseBox]);	
			TextDrawTextSize(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_BoxSizeX], NTD_TD[td][TD_BoxSizeY]);
			TextDrawSetSelectable(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_Selectable]);
			TextDrawAlignment(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_Alignment]);
			TextDrawSetProportional(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_Proportional]);
			TextDrawSetPreviewModel(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_PrevModelID]);
			TextDrawSetPreviewRot(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_PrevRotX], NTD_TD[td][TD_PrevRotY], NTD_TD[td][TD_PrevRotZ], NTD_TD[td][TD_PrevRotZoom]);
			TextDrawSetPreviewVehCol(NTD_TD[td][TD_SelfID], NTD_TD[td][TD_PrevModelC1], NTD_TD[td][TD_PrevModelC2]);
			
			//Show
			if(!EditorTextDrawShowForAll) TextDrawShowForPlayer(playerid, NTD_TD[td][TD_SelfID]);
			else TextDrawShowForAll(NTD_TD[td][TD_SelfID]);
		}
		else
		{
			if(NTD_TD[td][TD_BarID] == INVALID_PLAYER_BAR_ID)
			{
				SplitRGBA(NTD_TD[td][TD_Color],red,green,blue, alpha); 
				NTD_TD[td][TD_Color] = CreateRGBA(red,green,blue,NTD_TD[td][TD_ColorAlpha]);
				NTD_TD[td][TD_BarID] = CreatePlayerProgressBar(playerid, 
				NTD_TD[td][TD_PosX], 
				NTD_TD[td][TD_PosY], 
				NTD_TD[td][TD_BoxSizeX], 
				NTD_TD[td][TD_BoxSizeY],
				NTD_TD[td][TD_Color], 
				NTD_TD[td][TD_BarMaxPercentage],
				NTD_TD[td][TD_BarDirectory]);
			}
			
			//Show
			SetPlayerProgressBarValue(playerid, NTD_TD[td][TD_BarID], (NTD_TD[td][TD_BarMaxPercentage] / 2.0));
			ShowPlayerProgressBar(playerid, NTD_TD[td][TD_BarID]);
		}
		//Picker
		NTD_TD[td][TD_PickerID] = TextDrawCreate(NTD_TD[td][TD_PosX] - 1, NTD_TD[td][TD_PosY] - 10, TD_PICKER_TEXT);
		TextDrawFont(NTD_TD[td][TD_PickerID], 1);
		TextDrawSetOutline(NTD_TD[td][TD_PickerID], 0);
		TextDrawSetShadow(NTD_TD[td][TD_PickerID], 0);
		TextDrawLetterSize(NTD_TD[td][TD_PickerID], 0.445833, 1.600000);
		TextDrawTextSize(NTD_TD[td][TD_PickerID], 15.0, 15.0);
		TextDrawAlignment(NTD_TD[td][TD_PickerID], 2);
		TextDrawSetSelectable(NTD_TD[td][TD_PickerID], true);
		
		if(NTD_User[User_EditingTDID] != td) 
			TextDrawColor(NTD_TD[td][TD_PickerID], TDPICKER_COLOR);
		else
			TextDrawColor(NTD_TD[td][TD_PickerID], TDPICKER_COLOR_ACTIVE);

		if(EditorQuickSelect) 
			TextDrawShowForPlayer(playerid, NTD_TD[td][TD_PickerID]);
		return 1;
	}
	return 0;
}

CreateNewTDFromTemplate(templateid)
{
	new Tstring[300], Float:TPosX, Float:TPosY, TFont, bool:TisPublic, TOutlineSize, 
	TShadowSize, Float:TLetterSizeX, Float:TLetterSizeY, TColor, TBGColor, TBoxColor, 
	bool:ZUseBox, Float:TBoxSizeX, Float:TBoxSizeY, bool:TSelectable, TAlignment, 
	bool:TProportional, TPrevModel, TPrevModelC1, TPrevModelC2, Float:TPrevRotX, Float:TPrevRotY,
	Float:TPrevRotZ, Float:TPrevRotZoom, TColorA, TBGColorA, TBoxColorA;
	
	sscanf(Template[templateid][Template_Data], "s[300]ffiiiiffiiiiffiiiiiiffffiii",
		Tstring, TPosX, TPosY, TFont, TisPublic, TOutlineSize, 
		TShadowSize, TLetterSizeX, TLetterSizeY, TColor, TBGColor, TBoxColor, 
		ZUseBox, TBoxSizeX, TBoxSizeY, TSelectable, TAlignment, 
		TProportional, TPrevModel, TPrevModelC1, TPrevModelC2, TPrevRotX, TPrevRotY,
		TPrevRotZ, TPrevRotZoom, TColorA, TBGColorA, TBoxColorA);
		
	new tdid = CreateNewTD(-2, Tstring, TPosX, TPosY, TFont, TisPublic, TOutlineSize, 
		TShadowSize, TLetterSizeX, TLetterSizeY, TColor, TBGColor, TBoxColor, 
		ZUseBox, TBoxSizeX, TBoxSizeY, TSelectable, TAlignment, 
		TProportional, TPrevModel, TPrevModelC1, TPrevModelC2, TPrevRotX, TPrevRotY,
		TPrevRotZ, TPrevRotZoom, TColorA, TBGColorA, TBoxColorA);
	

	return tdid;
}

OpenTDDialog(playerid)
{
	new formatedtd[MAXFORMATEDTD];
	ClearDialogListitems(playerid);
	AddDialogListitem(playerid, GetLanguageMessage("textdrawslist", LANG_TYPE_DIALOGS, "info0"));
	AddDialogListitem(playerid, GetLanguageMessage("textdrawslist", LANG_TYPE_DIALOGS, "info1"));
	foreach(new i : I_TEXTDRAWS)
	{
		format(formatedtd, MAXFORMATEDTD, NTD_TD[i][TD_Text]);
		if(strlen(NTD_TD[i][TD_Text]) > MAXFORMATEDTD - 4)
		{
			strdel(formatedtd, MAXFORMATEDTD - 4, MAXFORMATEDTD);
			strcat(formatedtd, "...");
		}
		format(EditorString, sizeof EditorString, "%s%i "HEX_PALETTE_4"\"%s\"\t%s\t%s\t%s", 
			(i == NTD_User[User_EditingTDID] ? HEX_PALETTE_3">{FFFFFF} " : "   "),
			i, 
			formatedtd, 
			GetProcessedTDVarName(i),
			(NTD_TD[i][TD_IsGlobal] ? HEX_PALETTE_2"Global" : HEX_PALETTE_3"Player"),
			(NTD_TD[i][TD_Selectable] ? HEX_PALETTE_2"Yes" : HEX_PALETTE_3"No"));
		AddDialogListitem(playerid, EditorString);
	}
	PlayerSelectTD(playerid, false);
	
	ShowPlayerDialog(playerid, DIALOG_MANAGE, DIALOG_STYLE_TABLIST_HEADERS,  
	GetLanguageMessage("textdrawslist", LANG_TYPE_DIALOGS, "caption", "ii", Iter_Count(I_TEXTDRAWS), MAX_NTD_TDS), #, 
	GetLanguageMessage("textdrawslist", LANG_TYPE_DIALOGS, "button1"), 
	GetLanguageMessage("textdrawslist", LANG_TYPE_DIALOGS, "button2"), 
	EditorMaxDialogItems);
	return 1;
}



CreateNewTD(cloneid = -1, const Tstring[] = "_", Float:TPosX = 0.0, Float:TPosY = 0.0, TFont = 0, bool:TisPublic = true, TOutlineSize = 0, 
TShadowSize = 0, Float:TLetterSizeX = 0.0, Float:TLetterSizeY = 0.0, TColor = -1, TBGColor = -1, TBoxColor = -1, 
bool:ZUseBox = true, Float:TBoxSizeX = 0.0, Float:TBoxSizeY = 0.0, bool:TSelectable = false, TAlignment = 0, 
bool:TProportional = true, TPrevModel = 0, TPrevModelC1 = -1, TPrevModelC2 = -1, Float:TPrevRotX = 0.0, Float:TPrevRotY = 0.0,
Float:TPrevRotZ = 0.0, Float:TPrevRotZoom = 0.0, TColorA = -1, TBGColorA = 255, TBoxColorA = 255,
Float:TBarMaxPercentage = 100.0, TBarDirectory = BAR_DIRECTION_RIGHT)
{
	new index = Iter_Free(I_TEXTDRAWS);
	VALID_ITER_INDEX(I_TEXTDRAWS, index)
	{
		Iter_Add(I_TEXTDRAWS, index);
		NTD_TD[index][TD_Created] = true;
		NTD_TD[index][TD_SelfID] = Text:INVALID_TEXT_DRAW;
		NTD_TD[index][TD_BarID] = INVALID_PLAYER_BAR_ID;
		switch(cloneid)
		{
			case -2: //Template
			{
				format(NTD_TD[index][TD_Text], 300, Tstring);
				format(NTD_TD[index][TD_VarName], 35, "");
				NTD_TD[index][TD_PosX] = TPosX;
				NTD_TD[index][TD_PosY] = TPosY;
				NTD_TD[index][TD_Font] = TFont;
				NTD_TD[index][TD_IsGlobal] = TisPublic;
				NTD_TD[index][TD_OutlineSize] = TOutlineSize;
				NTD_TD[index][TD_ShadowSize] = TShadowSize;
				NTD_TD[index][TD_LetterSizeX] = TLetterSizeX;
				NTD_TD[index][TD_LetterSizeY] = TLetterSizeY;
				NTD_TD[index][TD_BoxSizeX] = TBoxSizeX;
				NTD_TD[index][TD_BoxSizeY] = TBoxSizeY;
				NTD_TD[index][TD_Color] = TColor;
				NTD_TD[index][TD_BGColor] = TBGColor;
				NTD_TD[index][TD_BoxColor] = TBoxColor;
				NTD_TD[index][TD_ColorAlpha] = TColorA;
				NTD_TD[index][TD_BGColorAlpha] = TBGColorA;
				NTD_TD[index][TD_BoxColorAlpha] = TBoxColorA;
				NTD_TD[index][TD_Alignment] = TAlignment;
				NTD_TD[index][TD_Selectable] = TSelectable;
				NTD_TD[index][TD_Proportional] = TProportional;
				NTD_TD[index][TD_UseBox] = ZUseBox;
				NTD_TD[index][TD_PrevModelID] = TPrevModel;
				NTD_TD[index][TD_PrevModelC1] = TPrevModelC1;
				NTD_TD[index][TD_PrevModelC2] = TPrevModelC2;
				NTD_TD[index][TD_PrevRotX] = TPrevRotX;
				NTD_TD[index][TD_PrevRotY] = TPrevRotY;
				NTD_TD[index][TD_PrevRotZ] = TPrevRotZ;
				NTD_TD[index][TD_PrevRotZoom] = TPrevRotZoom;
				NTD_TD[index][TD_BarMaxPercentage] = TBarMaxPercentage;
				NTD_TD[index][TD_BarDirectory] = TBarDirectory;
			}
			case -1: //Normal
			{
				format(NTD_TD[index][TD_Text], 300, "TextDraw");
				format(NTD_TD[index][TD_VarName], 35, "");
				NTD_TD[index][TD_PosX] = 233.0;
				NTD_TD[index][TD_PosY] = 225.0;
				NTD_TD[index][TD_Font] = 1;
				NTD_TD[index][TD_IsGlobal] = true;
				NTD_TD[index][TD_OutlineSize] = 1;
				NTD_TD[index][TD_ShadowSize] = 0;
				NTD_TD[index][TD_LetterSizeX] = 0.6;
				NTD_TD[index][TD_LetterSizeY] = 2.0;
				NTD_TD[index][TD_BoxSizeX] = 400.0;
				NTD_TD[index][TD_BoxSizeY] = 17.0;
				NTD_TD[index][TD_Color] = -1;
				NTD_TD[index][TD_BGColor] = 255;
				NTD_TD[index][TD_BoxColor] = 100;
				NTD_TD[index][TD_ColorAlpha] = 255;
				NTD_TD[index][TD_BGColorAlpha] = 255;
				NTD_TD[index][TD_BoxColorAlpha] = 50;
				NTD_TD[index][TD_Alignment] = 1;
				NTD_TD[index][TD_Selectable] = false;
				NTD_TD[index][TD_Proportional] = true;
				NTD_TD[index][TD_UseBox] = true;
				NTD_TD[index][TD_PrevModelID] = 0;
				NTD_TD[index][TD_PrevModelC1] = 1;
				NTD_TD[index][TD_PrevModelC2] = 1;
				NTD_TD[index][TD_PrevRotX] = -10.0;
				NTD_TD[index][TD_PrevRotY] = 0.0;
				NTD_TD[index][TD_PrevRotZ] = -20.0;
				NTD_TD[index][TD_PrevRotZoom] = 1.0;
				NTD_TD[index][TD_BarMaxPercentage] = 100.0;
				NTD_TD[index][TD_BarDirectory] = BAR_DIRECTION_RIGHT;
			}
			default: //Clone
			{
				if(NTD_TD[cloneid][TD_Created] == true)
				{
					format(NTD_TD[index][TD_Text], 300, NTD_TD[cloneid][TD_Text]);
					format(NTD_TD[index][TD_VarName], 35, "");
					NTD_TD[index][TD_PosX] = NTD_TD[cloneid][TD_PosX];
					NTD_TD[index][TD_PosY] = NTD_TD[cloneid][TD_PosY];
					NTD_TD[index][TD_Font] = NTD_TD[cloneid][TD_Font];
					NTD_TD[index][TD_IsGlobal] = NTD_TD[cloneid][TD_IsGlobal];
					NTD_TD[index][TD_OutlineSize] = NTD_TD[cloneid][TD_OutlineSize];
					NTD_TD[index][TD_ShadowSize] = NTD_TD[cloneid][TD_ShadowSize];
					NTD_TD[index][TD_LetterSizeX] = NTD_TD[cloneid][TD_LetterSizeX];
					NTD_TD[index][TD_LetterSizeY] = NTD_TD[cloneid][TD_LetterSizeY];
					NTD_TD[index][TD_BoxSizeX] = NTD_TD[cloneid][TD_BoxSizeX];
					NTD_TD[index][TD_BoxSizeY] = NTD_TD[cloneid][TD_BoxSizeY];
					NTD_TD[index][TD_Color] = NTD_TD[cloneid][TD_Color];
					NTD_TD[index][TD_BGColor] = NTD_TD[cloneid][TD_BGColor];
					NTD_TD[index][TD_BoxColor] = NTD_TD[cloneid][TD_BoxColor];
					NTD_TD[index][TD_ColorAlpha] = NTD_TD[cloneid][TD_ColorAlpha];
					NTD_TD[index][TD_BGColorAlpha] = NTD_TD[cloneid][TD_BGColorAlpha];
					NTD_TD[index][TD_BoxColorAlpha] = NTD_TD[cloneid][TD_BoxColorAlpha];
					NTD_TD[index][TD_Alignment] = NTD_TD[cloneid][TD_Alignment];
					NTD_TD[index][TD_Selectable] = NTD_TD[cloneid][TD_Selectable];
					NTD_TD[index][TD_Proportional] = NTD_TD[cloneid][TD_Proportional];
					NTD_TD[index][TD_UseBox] = NTD_TD[cloneid][TD_UseBox];
					NTD_TD[index][TD_PrevModelID] = NTD_TD[cloneid][TD_PrevModelID];
					NTD_TD[index][TD_PrevModelC1] = NTD_TD[cloneid][TD_PrevModelC1];
					NTD_TD[index][TD_PrevModelC2] = NTD_TD[cloneid][TD_PrevModelC2];
					NTD_TD[index][TD_PrevRotX] = NTD_TD[cloneid][TD_PrevRotX];
					NTD_TD[index][TD_PrevRotY] = NTD_TD[cloneid][TD_PrevRotY];
					NTD_TD[index][TD_PrevRotZ] = NTD_TD[cloneid][TD_PrevRotZ];
					NTD_TD[index][TD_PrevRotZoom] = NTD_TD[cloneid][TD_PrevRotZoom];
					NTD_TD[index][TD_BarMaxPercentage] = NTD_TD[cloneid][TD_BarMaxPercentage];
					NTD_TD[index][TD_BarDirectory] = NTD_TD[cloneid][TD_BarDirectory];
				}
			}
		}
		return index;
	}
	return -1;
}



/*
  ______       _   _   _                      ______                          _     _                       
 |  ____|     | | (_) | |                    |  ____|                        | |   (_)                      
 | |__      __| |  _  | |_    ___    _ __    | |__     _   _   _ __     ___  | |_   _    ___    _ __    ___ 
 |  __|    / _` | | | | __|  / _ \  | '__|   |  __|   | | | | | '_ \   / __| | __| | |  / _ \  | '_ \  / __|
 | |____  | (_| | | | | |_  | (_) | | |      | |      | |_| | | | | | | (__  | |_  | | | (_) | | | | | \__ \ 
 |______|  \__,_| |_|  \__|  \___/  |_|      |_|       \__,_| |_| |_|  \___|  \__| |_|  \___/  |_| |_| |___/
                                                                                                                                                                                                                      
*/


ShowEditor(playerid, bool:b1_active, bool:b2_active, bool:b3_active, bool:b4_active, bool:b5_active, bool:b6_active, bool:b7_active, bool:b8_active, bool:b9_active, bool:b10_active, bool:b11_active, bool:b12_active, bool:b13_active, bool:b14_active, bool:b15_active, bool:b16_active, bool:b17_active, bool:b18_active)
{
	HideEditor(playerid);
	TextDrawShowForPlayer(playerid, B_Exit);
	TextDrawShowForPlayer(playerid, B_Settings);
	TextDrawShowForPlayer(playerid, E_Box);
	
	//TextDrawSetSelectable(B_NewProject, false);
	TextDrawSetSelectable(B_OpenProject, false);
	TextDrawSetSelectable(B_CloseProject, false);
	TextDrawSetSelectable(B_Export, false);
	TextDrawSetSelectable(B_Manage, false);
	TextDrawSetSelectable(B_Font, false);
	TextDrawSetSelectable(B_TDSettings, false);
	TextDrawSetSelectable(B_Position, false);
	TextDrawSetSelectable(B_Size, false);
	TextDrawSetSelectable(B_Tekst, false);
	TextDrawSetSelectable(B_Color, false);
	TextDrawSetSelectable(B_Outline, false);
	TextDrawSetSelectable(B_Shadow, false);
	TextDrawSetSelectable(B_UseBox, false);
	TextDrawSetSelectable(B_Alignment, false);
	TextDrawSetSelectable(B_SwitchPublic, false);
	TextDrawSetSelectable(B_Selectable, false);
	TextDrawSetSelectable(B_Proportionality, false);
	
	new red,green,blue, alpha, unsetcolor;
	#pragma unused alpha
	SplitRGBA(EditorButtonsColor,red,green,blue, alpha); 
	unsetcolor = CreateRGBA(red,green,blue,35);
	//TextDrawColor(B_NewProject, unsetcolor);
	TextDrawColor(B_OpenProject, unsetcolor);
	TextDrawColor(B_CloseProject, unsetcolor);
	TextDrawColor(B_Export, unsetcolor);
	TextDrawColor(B_Manage, unsetcolor);
	TextDrawColor(B_Font, unsetcolor);
	TextDrawColor(B_TDSettings, unsetcolor);
	TextDrawColor(B_Position, unsetcolor);
	TextDrawColor(B_Size, unsetcolor);
	TextDrawColor(B_Tekst, unsetcolor);
	TextDrawColor(B_Color, unsetcolor);
	TextDrawColor(B_Outline, unsetcolor);
	TextDrawColor(B_Shadow, unsetcolor);
	TextDrawColor(B_UseBox, unsetcolor);
	TextDrawColor(B_Alignment, unsetcolor);
	TextDrawColor(B_SwitchPublic, unsetcolor);
	TextDrawColor(B_Selectable, unsetcolor);
	TextDrawColor(B_Proportionality, unsetcolor);
	
	new tdid = NTD_User[User_EditingTDID];
	if(b1_active) 
	{
		/*
		TextDrawSetSelectable(B_NewProject, true),
		TextDrawColor(B_NewProject, EditorButtonsColor);*/
	}
		
	if(b2_active) 
		TextDrawSetSelectable(B_OpenProject, true),
		TextDrawColor(B_OpenProject, EditorButtonsColor);
	if(b3_active) 
		TextDrawSetSelectable(B_CloseProject, true),
		TextDrawColor(B_CloseProject, EditorButtonsColor);
	if(b4_active && (Iter_Count(I_TEXTDRAWS) > 0)) 
		TextDrawSetSelectable(B_Export, true),
		TextDrawColor(B_Export, EditorButtonsColor);
	if(b5_active) 
		TextDrawSetSelectable(B_Manage, true),
		TextDrawColor(B_Manage, EditorButtonsColor);
	if(b6_active) 
		TextDrawSetSelectable(B_Font, true),
		TextDrawColor(B_Font, EditorButtonsColor);
	if(b7_active && tdid != -1)
	{
		if(NTD_TD[tdid][TD_Font] == TEXT_DRAW_FONT_MODEL_PREVIEW || NTD_TD[tdid][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR)
		{
			TextDrawSetSelectable(B_TDSettings, true);
			TextDrawColor(B_TDSettings, EditorButtonsColor);
		}
	}
	if(b8_active) 
		TextDrawSetSelectable(B_Position, true),
		TextDrawColor(B_Position, EditorButtonsColor);
	if(b9_active) 
		TextDrawSetSelectable(B_Size, true),
		TextDrawColor(B_Size, EditorButtonsColor);
	if(b10_active && tdid != -1)
	{
		if(NTD_TD[tdid][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
		{
			TextDrawSetSelectable(B_Tekst, true);
			TextDrawColor(B_Tekst, EditorButtonsColor);
		}
	}
	if(b11_active) 
		TextDrawSetSelectable(B_Color, true),
		TextDrawColor(B_Color, EditorButtonsColor);
	if(b12_active && tdid != -1)
	{
		if(NTD_TD[tdid][TD_Font] != TEXT_DRAW_FONT_MODEL_PREVIEW && NTD_TD[tdid][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
		{
			TextDrawSetSelectable(B_Outline, true);
			TextDrawColor(B_Outline, EditorButtonsColor);
		}
	}
	if(b13_active && tdid != -1)
	{
		if(NTD_TD[tdid][TD_Font] != TEXT_DRAW_FONT_MODEL_PREVIEW && NTD_TD[tdid][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
		{
			TextDrawSetSelectable(B_Shadow, true);
			TextDrawColor(B_Shadow, EditorButtonsColor);
		}
	}
	if(b14_active && tdid != -1)
	{
		if(NTD_TD[tdid][TD_Font] != TEXT_DRAW_FONT_MODEL_PREVIEW && NTD_TD[tdid][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
		{
			TextDrawSetSelectable(B_UseBox, true);
			TextDrawColor(B_UseBox, EditorButtonsColor);
		}
	}
	if(b15_active && tdid != -1)
	{
		if(NTD_TD[tdid][TD_Font] != TEXT_DRAW_FONT_MODEL_PREVIEW)
		{
			TextDrawSetSelectable(B_Alignment, true);
			TextDrawColor(B_Alignment, EditorButtonsColor);
		}
	}
	if(b16_active && tdid != -1) 
	{
		if(NTD_TD[tdid][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
		{
			TextDrawSetSelectable(B_SwitchPublic, true);
			TextDrawColor(B_SwitchPublic, EditorButtonsColor);
		}
	}
	if(b17_active && tdid != -1)
	{
		if(NTD_TD[tdid][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
		{
			TextDrawSetSelectable(B_Selectable, true);
			TextDrawColor(B_Selectable, EditorButtonsColor);
		}
	}
	if(b18_active && tdid != -1)
	{
		if(NTD_TD[tdid][TD_Font] != TEXT_DRAW_FONT_MODEL_PREVIEW && NTD_TD[tdid][TD_Font] != TEXT_DRAW_FONT_PROGRESS_BAR)
		{
			TextDrawSetSelectable(B_Proportionality, true),
			TextDrawColor(B_Proportionality, EditorButtonsColor);
		}
	}
	
	//TextDrawShowForPlayer(playerid, B_NewProject);
	TextDrawShowForPlayer(playerid, B_OpenProject);
	TextDrawShowForPlayer(playerid, B_CloseProject);
	TextDrawShowForPlayer(playerid, B_Export);
	TextDrawShowForPlayer(playerid, B_Manage);
	TextDrawShowForPlayer(playerid, B_Font);
	TextDrawShowForPlayer(playerid, B_TDSettings);
	TextDrawShowForPlayer(playerid, B_Position);
	TextDrawShowForPlayer(playerid, B_Size);
	TextDrawShowForPlayer(playerid, B_Tekst);
	TextDrawShowForPlayer(playerid, B_Color);
	TextDrawShowForPlayer(playerid, B_Outline);
	TextDrawShowForPlayer(playerid, B_Shadow);
	TextDrawShowForPlayer(playerid, B_UseBox);
	TextDrawShowForPlayer(playerid, B_Alignment);
	TextDrawShowForPlayer(playerid, B_SwitchPublic);
	TextDrawShowForPlayer(playerid, B_Selectable);
	TextDrawShowForPlayer(playerid, B_Proportionality);
	NTD_User[User_InEditor] = true;
	return 1;
}

HideEditor(playerid)
{
	TextDrawHideForPlayer(playerid, E_Box);
	TextDrawHideForPlayer(playerid, B_Exit);
	TextDrawHideForPlayer(playerid, B_Settings);
	//TextDrawHideForPlayer(playerid, B_NewProject);
	TextDrawHideForPlayer(playerid, B_OpenProject);
	TextDrawHideForPlayer(playerid, B_CloseProject);
	TextDrawHideForPlayer(playerid, B_Export);
	TextDrawHideForPlayer(playerid, B_Manage);
	TextDrawHideForPlayer(playerid, B_Font);
	TextDrawHideForPlayer(playerid, B_Position);
	TextDrawHideForPlayer(playerid, B_Size);
	TextDrawHideForPlayer(playerid, B_Tekst);
	TextDrawHideForPlayer(playerid, B_Color);
	TextDrawHideForPlayer(playerid, B_Outline);
	TextDrawHideForPlayer(playerid, B_Shadow);
	TextDrawHideForPlayer(playerid, B_UseBox);
	TextDrawHideForPlayer(playerid, B_Alignment);
	TextDrawHideForPlayer(playerid, B_SwitchPublic);
	TextDrawHideForPlayer(playerid, B_Selectable);
	TextDrawHideForPlayer(playerid, B_Proportionality);
	TextDrawHideForPlayer(playerid, B_TDSettings);
	return 1;
}

DestroyEditor()
{
	TextDrawDestroy(E_Box);
	TextDrawDestroy(B_Exit);
	TextDrawDestroy(B_Settings);
	//TextDrawDestroy(B_NewProject);
	TextDrawDestroy(B_OpenProject);
	TextDrawDestroy(B_CloseProject);
	TextDrawDestroy(B_Export);
	TextDrawDestroy(B_Manage);
	TextDrawDestroy(B_Font);
	TextDrawDestroy(B_Position);
	TextDrawDestroy(B_Size);
	TextDrawDestroy(B_Tekst);
	TextDrawDestroy(B_Color);
	TextDrawDestroy(B_Outline);
	TextDrawDestroy(B_Shadow);
	TextDrawDestroy(B_UseBox);
	TextDrawDestroy(B_Alignment);
	TextDrawDestroy(B_SwitchPublic);
	TextDrawDestroy(B_Selectable);
	TextDrawDestroy(B_Proportionality);
	TextDrawDestroy(B_TDSettings);
	return 1;
}

ShowWelcomeScreen(bool:show)
{
	if(show)
	{
		if(NTD_User[User_WelcomeScreenAlpha] == -1)
		{
			NTD_User[User_WelcomeScreenAlpha] = 0;
			NTD_User[User_WelcomeScreenColor] = 0xFFFFFFFF;
			NTD_User[User_WelcomeScreenColor] = CreateRGBAWithAlpha(NTD_User[User_WelcomeScreenColor], NTD_User[User_WelcomeScreenAlpha]);
			WelcomeScreen = TextDrawCreate(121.000000, 81.000000, WELCOME_SCREEN);
			TextDrawFont(WelcomeScreen, 4);
			TextDrawTextSize(WelcomeScreen, 397.500000, 244.000000);
			TextDrawColor(WelcomeScreen, NTD_User[User_WelcomeScreenColor]);
		}
		if(NTD_User[User_WelcomeTimer] != -1)
			KillTimer(NTD_User[User_WelcomeTimer]);
			
		TextDrawShowForPlayer(NTD_User[User_PlayerIDInEditor], WelcomeScreen);
		NTD_User[User_WelcomeTimer] = SetTimerEx("FadeTimer", 25, true, "b", true);
	}
	else
	{
		if(NTD_User[User_WelcomeScreenAlpha] != -1)
		{
			if(NTD_User[User_WelcomeTimer] != -1)
				KillTimer(NTD_User[User_WelcomeTimer]);
				
			TextDrawShowForPlayer(NTD_User[User_PlayerIDInEditor], WelcomeScreen);
			NTD_User[User_WelcomeTimer] = SetTimerEx("FadeTimer", 25, true, "b", false);
		}
	}
	return 1;
}

CreateEditor()
{
	E_Box = TextDrawCreate((EditorCompactMode) ? (EditorPosX) : (0), EditorPosY, BACKGROUND_BAR);
	TextDrawFont(E_Box, 4);
	TextDrawLetterSize(E_Box, 0.600000, 2.000000);
	TextDrawTextSize(E_Box, 640.000000 / ((EditorCompactMode) ? (EditorCompactSize) : (1.0)), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawBoxColor(E_Box, 0xFFFFFFFF);
	//TextDrawUseBox(E_Box, 1);
	
	B_Exit = TextDrawCreate((EditorCompactMode) ? (EditorPosX) : (0), EditorPosY - 12, BUTTON_EXIT);
	TextDrawFont(B_Exit, 4);
	TextDrawTextSize(B_Exit, BUTTON_TD_SIZE / 3, BUTTON_TD_SIZE / 3);
	TextDrawColor(B_Exit, 0xDC143CFF);
	TextDrawSetSelectable(B_Exit, true);
	
	B_Settings = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SIZE / 3), EditorPosY - 12, BUTTON_SETTINGS);
	TextDrawFont(B_Settings, 4);
	TextDrawTextSize(B_Settings, BUTTON_TD_SIZE / 3, BUTTON_TD_SIZE / 3);
	TextDrawColor(B_Settings, 0xFFFFFFFF);
	TextDrawSetSelectable(B_Settings, true);
	
	/*B_NewProject = TextDrawCreate((EditorCompactMode) ? (EditorPosX) : (0), EditorPosY, BUTTON_NEW);
	TextDrawFont(B_NewProject, 4);
	TextDrawTextSize(B_NewProject, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_NewProject, true);
	TextDrawColor(B_NewProject, EditorButtonsColor);*/
	
	B_OpenProject = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), EditorPosY, BUTTON_OPEN);
	TextDrawFont(B_OpenProject, 4);
	TextDrawTextSize(B_OpenProject, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_OpenProject, true);
	TextDrawColor(B_OpenProject, EditorButtonsColor);
	
	B_CloseProject = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 2, EditorPosY, BUTTON_CLOSE);
	TextDrawFont(B_CloseProject, 4);
	TextDrawTextSize(B_CloseProject, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_CloseProject, true);
	TextDrawColor(B_CloseProject, EditorButtonsColor);
	
	B_Export = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 3, EditorPosY, BUTTON_EXPORT);
	TextDrawFont(B_Export, 4);
	TextDrawTextSize(B_Export, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_Export, true);
	TextDrawColor(B_Export, EditorButtonsColor);
	
	B_Manage = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 4, EditorPosY, BUTTON_MANAGE);
	TextDrawFont(B_Manage, 4);
	TextDrawTextSize(B_Manage, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_Manage, true);
	TextDrawColor(B_Manage, EditorButtonsColor);
	
	B_Font = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 5, EditorPosY, BUTTON_FONT);
	TextDrawFont(B_Font, 4);
	TextDrawTextSize(B_Font, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_Font, true);
	TextDrawColor(B_Font, EditorButtonsColor);
	
	B_TDSettings = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 6, EditorPosY, BUTTON_TDSETTINGS);
	TextDrawFont(B_TDSettings, 4);
	TextDrawTextSize(B_TDSettings, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_TDSettings, true);
	TextDrawColor(B_TDSettings, EditorButtonsColor);
	
	B_Position = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 7, EditorPosY, BUTTON_POSITION);
	TextDrawFont(B_Position, 4);
	TextDrawTextSize(B_Position, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_Position, true);
	TextDrawColor(B_Position, EditorButtonsColor);
	
	B_Size = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 8, EditorPosY, BUTTON_SIZE);
	TextDrawFont(B_Size, 4);
	TextDrawTextSize(B_Size, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_Size, true);
	TextDrawColor(B_Size, EditorButtonsColor);
	
	B_Tekst = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 9, EditorPosY, BUTTON_TEKST);
	TextDrawFont(B_Tekst, 4);
	TextDrawTextSize(B_Tekst, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_Tekst, true);
	TextDrawColor(B_Tekst, EditorButtonsColor);
	
	B_Color = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 10, EditorPosY, BUTTON_COLOR);
	TextDrawFont(B_Color, 4);
	TextDrawTextSize(B_Color, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_Color, true);
	TextDrawColor(B_Color, EditorButtonsColor);
	
	B_Outline = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 11, EditorPosY, BUTTON_OUTLINE);
	TextDrawFont(B_Outline, 4);
	TextDrawTextSize(B_Outline, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_Outline, true);
	TextDrawColor(B_Outline, EditorButtonsColor);
	
	B_Shadow = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 12, EditorPosY, BUTTON_SHADOW);
	TextDrawFont(B_Shadow, 4);
	TextDrawTextSize(B_Shadow, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_Shadow, true);
	TextDrawColor(B_Shadow, EditorButtonsColor);
	
	B_UseBox = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 13, EditorPosY, BUTTON_USEBOX);
	TextDrawFont(B_UseBox, 4);
	TextDrawTextSize(B_UseBox, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_UseBox, true);
	TextDrawColor(B_UseBox, EditorButtonsColor);
	
	B_Alignment = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 14, EditorPosY, BUTTON_ALIGNMENT);
	TextDrawFont(B_Alignment, 4);
	TextDrawTextSize(B_Alignment, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_Alignment, true);
	TextDrawColor(B_Alignment, EditorButtonsColor);
	
	B_SwitchPublic = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 15, EditorPosY, BUTTON_SWITCHPUBLIC);
	TextDrawFont(B_SwitchPublic, 4);
	TextDrawTextSize(B_SwitchPublic, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_SwitchPublic, true);
	TextDrawColor(B_SwitchPublic, EditorButtonsColor);
	
	B_Selectable = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 16, EditorPosY, BUTTON_SELECTABLE);
	TextDrawFont(B_Selectable, 4);
	TextDrawTextSize(B_Selectable, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_Selectable, true);
	TextDrawColor(B_Selectable, EditorButtonsColor);
	
	B_Proportionality = TextDrawCreate(((EditorCompactMode) ? (EditorPosX) : (0)) + (BUTTON_TD_SPACER / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))) * 17, EditorPosY, BUTTON_PROPORTIONALITY);
	TextDrawFont(B_Proportionality, 4);
	TextDrawTextSize(B_Proportionality, (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))), (BUTTON_TD_SIZE / ((EditorCompactMode) ? (EditorCompactSize) : (1.0))));
	TextDrawSetSelectable(B_Proportionality, true);
	TextDrawColor(B_Proportionality, EditorButtonsColor);
	
	return 1;
}

ShowEditorEx(playerid, bool:showmouse = true)
{
	PlayerSelectTD(playerid, showmouse);
	if(NTD_User[User_ProjectOpened] == true)
	{
		if(NTD_User[User_EditingTDID] != -1)
			ShowEditor(playerid, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
		else 
			ShowEditor(playerid, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false);
	}
	else 
		ShowEditor(playerid, true, true, false, false, false, false, false, false ,false, false, false, false, false, false, false, false, false, false);
	return 1;
}

RelayerEditor()
{
	DestroyEditor();
	new playerid = NTD_User[User_PlayerIDInEditor];
	foreach(new i : I_TEXTDRAWS)
	{
		if(NTD_TD[i][TD_SelfID] != Text:INVALID_TEXT_DRAW)
		{
			TextDrawDestroy(NTD_TD[i][TD_SelfID]);
			NTD_TD[i][TD_SelfID] = Text:INVALID_TEXT_DRAW;
		}
		if(NTD_TD[i][TD_BarID] != INVALID_PLAYER_BAR_ID)
		{
			DestroyPlayerProgressBar(playerid, NTD_TD[i][TD_BarID]);
			NTD_TD[i][TD_BarID] = INVALID_PLAYER_BAR_ID;
		}
		TextDrawDestroy(NTD_TD[i][TD_PickerID]);
	}
	foreach(new i : I_TEXTDRAWS)
	{
		DrawTD(i);
	}
	CreateEditor();
	
	return 1;
}

/*
   ____    _     _                       ______                          _     _                       
  / __ \  | |   | |                     |  ____|                        | |   (_)                      
 | |  | | | |_  | |__     ___   _ __    | |__     _   _   _ __     ___  | |_   _    ___    _ __    ___ 
 | |  | | | __| | '_ \   / _ \ | '__|   |  __|   | | | | | '_ \   / __| | __| | |  / _ \  | '_ \  / __|
 | |__| | | |_  | | | | |  __/ | |      | |      | |_| | | | | | | (__  | |_  | | | (_) | | | | | \__ \ 
  \____/   \__| |_| |_|  \___| |_|      |_|       \__,_| |_| |_|  \___|  \__| |_|  \___/  |_| |_| |___/
                                                                                                       
                                                                                                       
*/
public BlockVarsChanger(bool:block)
{
	if(block)
	{
		NTD_User[User_BlockVarsTime] = true;
		SetTimerEx("BlockVarsChanger", BLOCK_VARS_TIME, false, "b", false);
	}
	else NTD_User[User_BlockVarsTime] = false;
	return 1;
}

bool:VariableExists(const string[])
{
	foreach(new i : I_TEXTDRAWS)
		if(!strcmp(NTD_TD[i][TD_VarName], string, true) && !isnull(NTD_TD[i][TD_VarName]) && NTD_TD[i][TD_Created]) return true;
	return false;
}

CallNTDCommand(playerid)
{
	if(IsPlayerAdmin(playerid))
	{
		if(ScriptScriptActive)
		{
			if(NTD_User[User_InEditor] == false)
			{
				LoadLanguages();
				LoadConfigurations();
				ChangeEditorLanguage(GetLanguageIndexFromName(EditorLanguageFile));
				if(EditorLanguage == -1)
				{
					ShowLanguageChangeDialog(playerid, DIALOG_LANGUAGE);
					return 1;
				}
				else if(strcmp(EditorVersion, SCRIPT_VERSION_CHECK, false) != 0)
				{
					ShowPlayerDialog(playerid, DIALOG_SETTINGRESET, DIALOG_STYLE_MSGBOX, 
					GetLanguageMessage("oldversionsettingsreset", LANG_TYPE_DIALOGS, "caption"), 
					GetLanguageMessage("oldversionsettingsreset", LANG_TYPE_DIALOGS, "infos"), 
					GetLanguageMessage("oldversionsettingsreset", LANG_TYPE_DIALOGS, "button1"), 
					GetLanguageMessage("oldversionsettingsreset", LANG_TYPE_DIALOGS, "button2"));
					return 1;
				}
				CreateEditor();
				NTD_User[User_InEditor] = true;
				NTD_User[User_ChangingState] = CH_NONE;
				NTD_User[User_ProjectOpened] = false;
				NTD_User[User_PlayerIDInEditor] = playerid;
				NTD_User[User_ChoosenTDID] = -1;
				NTD_User[User_EditingTDID] = -1;
				NTD_User[User_ChangingMColorState] = -1;
				NTD_User[User_CursorTimer] = -1;
				NTD_User[User_WelcomeTimer] = -1;
				NTD_User[User_WelcomeScreenAlpha] = -1;
				ShowWelcomeScreen(true);
				TogglePlayerControllable(playerid, false);
				ShowEditorEx(playerid);
				ShowInfo(playerid, GetLanguageMessage("infoeditorleave", LANG_TYPE_MESSAGES));
				for(new i; i < 15; i++)
					SendClientMessage(playerid, -1, " ");
			}
			else
			{
				if(NTD_User[User_PlayerIDInEditor] == playerid)
				{
					SaveConfigurations();
					HideEditor(playerid);
					DestroyEditor();
					NTD_User[User_InEditor] = false;
					NTD_User[User_ChangingState] = CH_NONE;
					NTD_User[User_ChoosenTDID] = -1;
					NTD_User[User_EditingTDID] = -1;
					NTD_User[User_ChangingMColorState] = -1;
					PlayerSelectTD(playerid, false);
					TextDrawDestroy(WelcomeScreen);
					if(NTD_User[User_WelcomeTimer] != -1)
					{
						
						NTD_User[User_WelcomeScreenAlpha] = -1;
						KillTimer(NTD_User[User_WelcomeTimer]);
						NTD_User[User_WelcomeTimer] = -1;
					}
					TogglePlayerControllable(playerid, true);
					format(EditorString, sizeof EditorString, HEX_PALETTE_1"NTD: {FFFFFF}%s", GetLanguageMessage("editordisabled", LANG_TYPE_MESSAGES));
					SendClientMessage(playerid, -1, EditorString);
					if(NTD_User[User_ProjectOpened])
					{
						SaveProject(NTD_User[User_ProjectIndex]);
						foreach(new i : I_TEXTDRAWS)
							DestroyTD(i, i);
						NTD_User[User_ProjectOpened] = false;
					}
				}
				else 
				{
					format(EditorString, sizeof EditorString, HEX_PALETTE_1"NTD: {FFFFFF}%s", GetLanguageMessage("editorinuse", LANG_TYPE_MESSAGES));
					SendClientMessage(playerid, -1, EditorString);
				}
			}
		}
		else 
		{
			if(EditorLanguage == -1)
				ShowInfo(playerid, "{FF0000}Script has been disabled!\n{FFFFFF}Check server logs for more informations!");
			else
				ShowInfo(playerid, GetLanguageMessage("infoeditorlocked", LANG_TYPE_MESSAGES));
		}
	}
	else
	{
		
		if(EditorLanguage == -1)
			SendClientMessage(playerid, -1, HEX_PALETTE_1"NTD: {FFFFFF}You are not authorized to use this command! Please Login to RCON.");
		else
		{
			format(EditorString, sizeof EditorString, HEX_PALETTE_1"NTD: {FFFFFF}%s", GetLanguageMessage("nopermit", LANG_TYPE_MESSAGES));
			SendClientMessage(playerid, -1, EditorString);
		}
			
	}
	return 1;
}

EnableVarChangeTimer(bool:starttimer)
{
	if(starttimer)
	{
		if(NTD_User[User_ChangingVarsTimer] != -1)
			KillTimer(NTD_User[User_ChangingVarsTimer]);
		NTD_User[User_ChangingVarsTimer] = SetTimer("ChangingVarsTime", CHANGING_VAR_TIME, true);
	}
	else
	{
		if(NTD_User[User_ChangingVarsTimer] != -1)
			KillTimer(NTD_User[User_ChangingVarsTimer]);
		NTD_User[User_ChangingVarsTimer] = -1;
	}
	return 1;
}

ShowManualVarChangeDialog(playerid)
{
	new tdid = NTD_User[User_EditingTDID];
	ClearDialogListitems(playerid);
	AddDialogListitem(playerid, GetLanguageMessage("manualvarchange", LANG_TYPE_DIALOGS, "info0"));
	switch(NTD_User[User_ChangingState])
	{
		case CH_POSITION:
		{
			AddDialogListitem(playerid, GetLanguageMessage("manualvarchange", LANG_TYPE_DIALOGS, "info1", "f", NTD_TD[tdid][TD_PosX]));
			AddDialogListitem(playerid, GetLanguageMessage("manualvarchange", LANG_TYPE_DIALOGS, "info2", "f", NTD_TD[tdid][TD_PosY]));
		}
		case CH_SIZE:
		{
			AddDialogListitem(playerid, GetLanguageMessage("manualvarchange", LANG_TYPE_DIALOGS, "info1", "f", (NTD_User[User_ChangingSizeState] == 0) ? (NTD_TD[tdid][TD_LetterSizeX]) : (NTD_TD[tdid][TD_BoxSizeX])));
			AddDialogListitem(playerid, GetLanguageMessage("manualvarchange", LANG_TYPE_DIALOGS, "info2", "f", (NTD_User[User_ChangingSizeState] == 0) ? (NTD_TD[tdid][TD_LetterSizeY]) : (NTD_TD[tdid][TD_BoxSizeY])));
		}
		case CH_MODEL_ROTATION:
		{
			AddDialogListitem(playerid, GetLanguageMessage("manualvarchange", LANG_TYPE_DIALOGS, "info1", "f", NTD_TD[tdid][TD_PrevRotX]));
			AddDialogListitem(playerid, GetLanguageMessage("manualvarchange", LANG_TYPE_DIALOGS, "info2", "f", NTD_TD[tdid][TD_PrevRotY]));
			AddDialogListitem(playerid, GetLanguageMessage("manualvarchange", LANG_TYPE_DIALOGS, "info3", "f", NTD_TD[tdid][TD_PrevRotZ]));
		}
		case CH_MODEL_ZOOM:
		{
			AddDialogListitem(playerid, GetLanguageMessage("manualvarchange", LANG_TYPE_DIALOGS, "info4", "f", NTD_TD[tdid][TD_PrevRotZoom]));
		}
		case CH_MODEL_COLOR:
		{
			AddDialogListitem(playerid, GetLanguageMessage("manualvarchange", LANG_TYPE_DIALOGS, "info5", "i", NTD_TD[tdid][TD_PrevModelC1]));
			AddDialogListitem(playerid, GetLanguageMessage("manualvarchange", LANG_TYPE_DIALOGS, "info6", "i", NTD_TD[tdid][TD_PrevModelC2]));
		}
	}
	ShowPlayerDialog(playerid, DIALOG_MANUALVARCHANGE, DIALOG_STYLE_TABLIST_HEADERS, 
	GetLanguageMessage("manualvarchange", LANG_TYPE_DIALOGS, "caption"), #, 
	GetLanguageMessage("manualvarchange", LANG_TYPE_DIALOGS, "button1"), 
	GetLanguageMessage("manualvarchange", LANG_TYPE_DIALOGS, "button2"),
	NDP_AUTO);
	return 1;
}

ResetConfiguration(playerid)
{
	EditorPosX = 0;
	EditorPosY = BUTTON_MAXHEIGHT;
	EditorCursorColor = CURSOR_COLOR;
	EditorButtonsColor = BUTTON_TD_COLOR;
	EditorFasterKey = KEY_JUMP;
	EditorAcceptKey = KEY_SPRINT;
	EditorVersion = SCRIPT_VERSION_CHECK;
	EditorCompactMode = false;
	ToggleTextDrawShowForAll(false);
	QuickSelectionShow(playerid, true);
	EditorQuickSelect = true;
	EditorMaxDialogItems = DEFAULT_DIALOG_ITEMS_PER_PAGE;
	return 1;
}

QuickSelectionShow(playerid, bool:enable)
{
	if(NTD_User[User_ProjectOpened] == true)
	{
		if(enable)
		{
			foreach(new i : I_TEXTDRAWS)
				TextDrawShowForPlayer(playerid, NTD_TD[i][TD_PickerID]);
		}
		else
		{
			foreach(new i : I_TEXTDRAWS)
				TextDrawHideForPlayer(playerid, NTD_TD[i][TD_PickerID]);
		}
	}
	return 1;
}

ShowInfo(playerid, const text[])
{
	format(EditorString, sizeof EditorString, CAPTION_TEXT"%s", GetLanguageMessage("infodialogcaption", LANG_TYPE_MESSAGES));
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, EditorString, text, "OK", #);
	PlayerPlaySound(playerid, CONFIRM_SOUNDID, 0.0, 0.0, 0.0);
	return 1;
}

ColorDialog(playerid, cstate)
{
	if(cstate == 0)
	{
		NTD_User[User_ChangingColorBar] = false;
		ShowPlayerDialog(playerid, DIALOG_COLOR1, DIALOG_STYLE_LIST, 
		GetLanguageMessage("colorchangelist1", LANG_TYPE_DIALOGS, "caption"), 
		GetLanguageMessage("colorchangelist1", LANG_TYPE_DIALOGS, "infos"),
		GetLanguageMessage("colorchangelist1", LANG_TYPE_DIALOGS, "button1"), 
		GetLanguageMessage("colorchangelist1", LANG_TYPE_DIALOGS, "button2"));
		PlayerSelectTD(playerid, false);
	}
	else
	{
		NTD_User[User_ChangingColorBar] = false;
		if(cstate == 2)
		{
			NTD_User[User_ChangingMColorState] = 0;
			NTD_User[User_ChangingColorBar] = true;
		}
		ShowPlayerDialog(playerid, DIALOG_COLOR2, DIALOG_STYLE_LIST, 
		GetLanguageMessage("colorchangelist2", LANG_TYPE_DIALOGS, "caption"), 
		GetLanguageMessage("colorchangelist2", LANG_TYPE_DIALOGS, "infos"),
		GetLanguageMessage("colorchangelist2", LANG_TYPE_DIALOGS, "button1"), 
		GetLanguageMessage("colorchangelist2", LANG_TYPE_DIALOGS, "button2"));
		PlayerSelectTD(playerid, false);
	}
	return 1;
}

ToggleTextDrawShowForAll(bool:toggle)
{
	EditorTextDrawShowForAll = toggle;
	if(toggle)
	{
		foreach(new i : I_TEXTDRAWS)
		{
			if(NTD_TD[i][TD_Created])
				TextDrawShowForAll(NTD_TD[i][TD_SelfID]);
		}
	}
	else
	{
		foreach(new i : I_TEXTDRAWS)
		{
			if(NTD_TD[i][TD_Created])
			{
				TextDrawHideForAll(NTD_TD[i][TD_SelfID]);
				TextDrawShowForPlayer(NTD_User[User_PlayerIDInEditor], NTD_TD[i][TD_SelfID]);
			}
		}
	}
	return 1;
}

LoadConfigurations()
{
	printf("Loading Configuration: %s", MakePath(SETTINGS_FILEPATH, true));
	if(Exists( MakePath(SETTINGS_FILEPATH, true) ))
	{
		new Node:node;
		JSON_ParseFile( MakePath(SETTINGS_FILEPATH, true) , node);
		JSON_GetInt(node, "x", EditorPosX);
		JSON_GetInt(node, "y", EditorPosY);
		JSON_GetInt(node, "hcolor", EditorCursorColor);
		JSON_GetInt(node, "bcolor", EditorButtonsColor);
		JSON_GetInt(node, "fasterkey", EditorFasterKey);
		JSON_GetInt(node, "acceptkey", EditorAcceptKey);
		JSON_GetBool(node, "quickselect", EditorQuickSelect);
		JSON_GetBool(node, "tdshowforall", EditorTextDrawShowForAll);
		JSON_GetBool(node, "compactmode", EditorCompactMode);
		JSON_GetString(node, "scriptversion", EditorVersion);
		JSON_GetString(node, "languagefile", EditorLanguageFile);
		JSON_GetInt(node, "maxdialogitems", EditorMaxDialogItems);
		EditorMaxDialogItems = clamp(EditorMaxDialogItems, 1, NDP_AUTO);
		return 1;
	}
	return SaveConfigurations();
}

SaveConfigurations()
{
	new Node:node = JSON_Object(
		"x", JSON_Int(EditorPosX),
		"y", JSON_Int(EditorPosY),
		"hcolor", JSON_Int(EditorCursorColor),
		"bcolor", JSON_Int(EditorButtonsColor),
		"fasterkey", JSON_Int(EditorFasterKey),
		"acceptkey", JSON_Int(EditorAcceptKey),
		"quickselect", JSON_Bool(EditorQuickSelect),
		"tdshowforall", JSON_Bool(EditorTextDrawShowForAll),
		"compactmode", JSON_Bool(EditorCompactMode),
		"scriptversion", JSON_String(EditorVersion),
		"languagefile", JSON_String(EditorLanguageFile),
		"maxdialogitems", JSON_Int(EditorMaxDialogItems)
	);
	JSON_SaveFile(MakePath(SETTINGS_FILEPATH, true), node);
	printf("Saving Configuration: %s", MakePath(SETTINGS_FILEPATH, true));
	return 1;
}

GetProcessedTDVarName(tdid)
{
	new string[64] = "ERROR";
	if(NTD_TD[tdid][TD_Created])
	{
		if(strlen(NTD_TD[tdid][TD_VarName]) > 0)
			format(string, sizeof string, NTD_TD[tdid][TD_VarName]);
		else
		{
			if(NTD_TD[tdid][TD_Font] == TEXT_DRAW_FONT_PROGRESS_BAR)
				format(string, sizeof string, "playerprogressbar_%i", tdid);
			else if(!NTD_TD[tdid][TD_IsGlobal])
				format(string, sizeof string, "playertextdraw_%i", tdid);
			else 
				format(string, sizeof string, "textdraw_%i", tdid);
		}
	}
	return string;
}

MakePath(const path[], bool:addScriptfiles)
{
	new Path[258];
	switch(addScriptfiles)
	{
		case true: format(Path, 258, "scriptfiles/%s", path);
		case false: format(Path, 258, path);
	}
	return Path;
}

/*
  _                                                                 ______                          _     _                       
 | |                                                               |  ____|                        | |   (_)                      
 | |        __ _   _ __     __ _   _   _    __ _    __ _    ___    | |__     _   _   _ __     ___  | |_   _    ___    _ __    ___ 
 | |       / _` | | '_ \   / _` | | | | |  / _` |  / _` |  / _ \   |  __|   | | | | | '_ \   / __| | __| | |  / _ \  | '_ \  / __|
 | |____  | (_| | | | | | | (_| | | |_| | | (_| | | (_| | |  __/   | |      | |_| | | | | | | (__  | |_  | | | (_) | | | | | \__ \ 
 |______|  \__,_| |_| |_|  \__, |  \__,_|  \__,_|  \__, |  \___|   |_|       \__,_| |_| |_|  \___|  \__| |_|  \___/  |_| |_| |___/
                            __/ |                   __/ |                                                                         
                           |___/                   |___/                                                                          
*/

GetLanguageIndexFromName(const langName[])
{
	foreach(new i : I_LANGUAGES)
	{
		if(!strcmp(Language[i][l_name], langName, false))
		{
			return i;
		}
	}
	return -1;
}

AddLanguageToList(const name[], const author[], const version[], Node:messagesNode, Node:gametextsNode, Node:dialogsNode)
{
	new free = Iter_Free(I_LANGUAGES);
	VALID_ITER_INDEX(I_LANGUAGES, free)
	{
		Iter_Add(I_LANGUAGES, free);
		format(Language[free][l_name], 32, name);
		format(Language[free][l_author], 128, author);
		format(Language[free][l_version], 10, version);
		Language[free][l_messagesNode] = messagesNode;
		Language[free][l_gametextsNode] = gametextsNode;
		Language[free][l_dialogsNode] = dialogsNode;
		JSON_ToggleGC(Language[free][l_messagesNode], false);
		JSON_ToggleGC(Language[free][l_gametextsNode], false);
		JSON_ToggleGC(Language[free][l_dialogsNode], false);
	}
	return 1;
}

LoadLanguages()
{
	Iter_Clear(I_LANGUAGES);

	new Directory:dir = OpenDir( MakePath(LANGUAGES_DIRECTORYPATH, true) );
	new langFile[126], langFilePath[256], ENTRY_TYPE:type, fileExtension[18];
	new Node:languageNode, langName[32], langAuthor[128], langVersion[10], langChecksum[41];
	new Node:messagesnode, Node:gametextsnode, Node:dialogsnode;
	while(DirNext(dir, type, langFilePath)) 
	{
		if(type == E_REGULAR) 
		{
			PathBase(langFilePath, langFile);
			PathExt(langFile, fileExtension);
			if(!strcmp(fileExtension, ".json", true))
			{
				langChecksum = "\1";
				JSON_ParseFile(langFilePath, languageNode);
				JSON_GetString(languageNode, "language", langName);
				JSON_GetString(languageNode, "author", langAuthor);
				JSON_GetString(languageNode, "version", langVersion);
				JSON_GetString(languageNode, "checksum", langChecksum);
				if(!strcmp(langChecksum, LANGUAGES_CHECKSUM, false))
				{
					JSON_GetObject(languageNode, "messages", messagesnode);
					JSON_GetObject(languageNode, "gametexts", gametextsnode);
					JSON_GetObject(languageNode, "dialogs", dialogsnode);
					AddLanguageToList(langName, langAuthor, langVersion, messagesnode, gametextsnode, dialogsnode);
				}
			}
			
		}
    }

	CloseDir(dir);
	return 1;
}

ChangeEditorLanguage(index)
{
	EditorLanguage = GetLanguageIndexFromName(Language[index][l_name]);
	format(EditorLanguageFile, sizeof EditorLanguageFile, Language[index][l_name]);
	return 1;
}

ShowLanguageChangeDialog(playerid, ondialogid)
{
	ClearDialogListitems(playerid);
	EditorLString = "";
	foreach(new i : I_LANGUAGES)
	{
		format(EditorLString, sizeof EditorLString, "{8080FF}%s", Language[i][l_name]);
		AddDialogListitem(playerid, EditorLString);
	}
	ShowPlayerDialog(playerid, ondialogid, DIALOG_STYLE_TABLIST, CAPTION_TEXT"Language", #, "OK", #, 10);
	return 1;
}

stock GetLanguageMessage(const key[], type, const subKey[] = "\1", const fmat[] = "", GLOBAL_TAG_TYPES:...)
{
	new langMessageStr[258];
	new langID = EditorLanguage;
	new argumentString[10][128];
	new args = numargs();
	new tmpArgsMacroStr[10];
	if(EditorLanguage == -1)
	{
		langMessageStr = "Language Data Error";
		return langMessageStr;
	}
	if(args > 4)
	{
		for(new a = 4; a < args; a++)
		{
			switch( fmat[(a - 4)] )
			{
				case 's': GetArgStr(a, argumentString[a - 4]);
				case 'i': format(argumentString[a - 4], 128, "%i", getarg(a));
				case 'f': format(argumentString[a - 4], 128, "%f", getarg(a));
				case 'x': format(argumentString[a - 4], 128, "%x", getarg(a));
			}
		}
	}
	switch(type)
	{
		case LANG_TYPE_MESSAGES: JSON_GetString(Language[langID][l_messagesNode], key, langMessageStr);
		case LANG_TYPE_GAMETEXTS: JSON_GetString(Language[langID][l_gametextsNode], key, langMessageStr);
		case LANG_TYPE_DIALOGS: 
		{
			new Node:tmpDialogNode;
			JSON_GetObject(Language[langID][l_dialogsNode], key, tmpDialogNode);
			if(!strcmp(subKey, "infos", true))
			{
				new tmpDialogInfoKey[8], tmpDialogInfoStr[128];
				for(new i; i < MAX_NTD_DIALOG_INFO; i++)
				{
					format(tmpDialogInfoKey, 8, "info%i", i);
					if(JSON_GetString(tmpDialogNode, tmpDialogInfoKey, tmpDialogInfoStr) == 0)
					{
						if(i > 0)
							strcat(langMessageStr, "\n");
						if(args > 4)
						{
							for(new a = 0; a < (args - 4); a++)
							{
								format(tmpArgsMacroStr, 10, "#%i", (a + 1));
								strreplace(tmpDialogInfoStr, tmpArgsMacroStr, argumentString[a]);
							}
						}
						strcat(langMessageStr,  tmpDialogInfoStr);
					}
					else break;
				}
			}
			else if(!strcmp(subKey, "caption", true))
			{
				if(JSON_GetString(tmpDialogNode, subKey, langMessageStr) == 0)
				{
					strins(langMessageStr, CAPTION_TEXT, 0);
				}
				else langMessageStr = "Language Data Error";
				
			}
			else
			{
				if(JSON_GetString(tmpDialogNode, subKey, langMessageStr) != 0)
				{
					langMessageStr = "Language Data Error";
				}
			}
			
		}
	}
	strreplace(langMessageStr, "#t", "\t");
	strreplace(langMessageStr, "#n", "\n");
	return langMessageStr;
}